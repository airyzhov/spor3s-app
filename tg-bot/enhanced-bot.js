// –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∂–∏–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
process.env.SUPABASE_URL = 'https://hwospkbheqaauluoytvz.supabase.co';
process.env.SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh3b3Nwa2JoZXFhYXVsdW95dHZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NjQyMDIsImV4cCI6MjA2NzE0MDIwMn0.vIUqjDmvEtAeJi_sCrntD8rUdEr8EpoMXpbTcDhCJIs';
process.env.TELEGRAM_BOT_TOKEN = '6522297183:AAE60O9EJy8c8SfdbLOsRGb6B06eHYBWLyo';
console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é');

require('dotenv').config({ path: __dirname + '/.env' });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
if (!process.env.SUPABASE_URL) {
  process.env.SUPABASE_URL = 'https://hwospkbheqaauluoytvz.supabase.co';
  process.env.SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh3b3Nwa2JoZXFhYXVsdW95dHZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NjQyMDIsImV4cCI6MjA2NzE0MDIwMn0.vIUqjDmvEtAeJi_sCrntD8rUdEr8EpoMXpbTcDhCJIs';
  process.env.TELEGRAM_BOT_TOKEN = '6522297183:AAE60O9EJy8c8SfdbLOsRGb6B06eHYBWLyo';
  console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é');
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('SUPABASE_URL:', process.env.SUPABASE_URL);
console.log('SUPABASE_ANON_KEY:', process.env.SUPABASE_ANON_KEY ? '–ï–°–¢–¨' : '–ù–ï–¢');
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '–ï–°–¢–¨' : '–ù–ï–¢');

const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');

class EnhancedTelegramBot {
  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );
    
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      const telegramId = ctx.from.id.toString();
      const name = ctx.from.first_name;
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.getOrCreateUser(telegramId, name);
        
        const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spor3s!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∏–±–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫:

üçÑ **–ï–∂–æ–≤–∏–∫** ‚Äî –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
üò¥ **–ú—É—Ö–æ–º–æ—Ä** ‚Äî –¥–ª—è —Å–Ω–∞ –∏ —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞  
‚ö° **–ö–æ—Ä–¥–∏—Ü–µ–ø—Å** ‚Äî –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
üåü **–ö—É—Ä—Å 4 –≤ 1** ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!

üí° **–ö–æ–º–∞–Ω–¥—ã:**
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
/my_coins ‚Äî –≤–∞—à–∏ Spor3s Coins
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        `;
        
        await ctx.reply(welcomeMessage);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        await this.saveMessage(user.id, 'system', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞', 'telegram_bot');
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      const helpMessage = `
ü§ñ **Spor3s AI Assistant**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
‚Ä¢ –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –¥–æ–±–∞–≤–æ–∫
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ Spor3s Coins

**–ö–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/my_coins ‚Äî –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –µ–∂–æ–≤–∏–∫–µ"
‚Ä¢ "–•–æ—á—É –∫—É–ø–∏—Ç—å –º—É—Ö–æ–º–æ—Ä"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –º–æ–Ω–µ—Ç?"
‚Ä¢ "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–∫—É"

üéØ **–¶–µ–ª—å:** –ü–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –≥—Ä–∏–±–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!
        `;
      
      await ctx.reply(helpMessage);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /my_coins
    this.bot.command('my_coins', async (ctx) => {
      const telegramId = ctx.from.id.toString();
      
      try {
        const user = await this.getOrCreateUser(telegramId, ctx.from.first_name);
        const coins = await this.getUserCoins(user.id);
        
        const coinsMessage = `
üí∞ **–í–∞—à–∏ Spor3s Coins**

ü™ô **–ë–∞–ª–∞–Ω—Å:** ${coins.balance} SC
üìä **–£—Ä–æ–≤–µ–Ω—å:** ${coins.level}
üéØ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:** ${coins.nextLevel} SC

üí° **–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫–∏–Ω—ã: +10 SC
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç: +50 SC
‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏: +100 SC
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã: +200 SC

üõí **–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:**
‚Ä¢ –°–∫–∏–¥–∫–∏ –¥–æ 30% –Ω–∞ –∑–∞–∫–∞–∑—ã
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        `;
        
        await ctx.reply(coinsMessage);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /my_coins:', error);
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–∞—Ö.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /order
    this.bot.command('order', async (ctx) => {
      const orderMessage = `
üõí **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:

1Ô∏è‚É£ **–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑** ‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç
2Ô∏è‚É£ **–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞** ‚Äî —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
3Ô∏è‚É£ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** ‚Äî –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –µ–∂–æ–≤–∏–∫"
‚Ä¢ "–ö—É–ø–∏—Ç—å –º—É—Ö–æ–º–æ—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
‚Ä¢ "–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å 4 –≤ 1"
        `;
      
      await ctx.reply(orderMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const telegramId = ctx.from.id.toString();
      const message = ctx.message.text;
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.getOrCreateUser(telegramId, ctx.from.first_name);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.saveMessage(user.id, 'user', message, 'telegram_bot');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const context = await this.getUserContext(user.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI API
        const aiResponse = await this.callAI(message, context);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        await this.saveMessage(user.id, 'assistant', aiResponse, 'telegram_bot');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply(aiResponse);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
        if (this.shouldCreateOrder(message, aiResponse)) {
          await this.handleOrderCreation(user.id, message, aiResponse, ctx);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    this.bot.action(/order_(.+)/, async (ctx) => {
      const productId = ctx.match[1];
      
      try {
        const user = await this.getOrCreateUser(ctx.from.id.toString(), ctx.from.first_name);
        
        // –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑
        const orderData = {
          user_id: user.id,
          items: { [productId]: 1 },
          total: 1100, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
          fio: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          phone: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          address: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          comment: `–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram: ${productId}`
        };
        
        const response = await fetch('http://localhost:3000/api/order-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(orderData)
        });
        
        if (response.ok) {
          const order = await response.json();
          await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ù–æ–º–µ—Ä: #${order.id}`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
          await this.notifyManager(order, user.id);
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.');
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getOrCreateUser(telegramId, name) {
    const { data: existingUser } = await this.supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (existingUser) {
      return existingUser;
    }

    const { data: newUser } = await this.supabase
      .from('users')
      .insert([{
        telegram_id: telegramId,
        name: name || 'Unknown',
        created_at: new Date().toISOString()
      }])
      .select()
      .single();

    return newUser;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  async saveMessage(userId, role, content, source) {
    await this.supabase
      .from('messages')
      .insert([{
        user_id: userId,
        role: role,
        content: content,
        source: source,
        created_at: new Date().toISOString()
      }]);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserContext(userId) {
    const { data: messages } = await this.supabase
      .from('messages')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);

    const { data: orders } = await this.supabase
      .from('orders')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    return {
      messages: messages || [],
      orders: orders || [],
      user_id: userId
    };
  }

  // –í—ã–∑–æ–≤ AI API
  async callAI(message, context) {
    const response = await fetch('http://localhost:3000/api/ai', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [{ role: 'user', content: message }],
        user_id: context.user_id,
        context: context
      })
    });

    const data = await response.json();
    return data.reply || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserCoins(userId) {
    const { data: userLevel } = await this.supabase
      .from('user_levels')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (userLevel) {
      return {
        balance: userLevel.sc_balance || 0,
        level: userLevel.level || 1,
        nextLevel: Math.max(0, (userLevel.level || 1) * 100 - (userLevel.sc_balance || 0))
      };
    }

    return {
      balance: 0,
      level: 1,
      nextLevel: 100
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  shouldCreateOrder(userMessage, aiResponse) {
    const orderKeywords = ['–∑–∞–∫–∞–∑', '–∫—É–ø–∏—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∫–æ—Ä–∑–∏–Ω–∞', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å'];
    return orderKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword) ||
      aiResponse.toLowerCase().includes(keyword)
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  async handleOrderCreation(userId, userMessage, aiResponse, ctx) {
    try {
      const orderData = this.parseOrderData(userMessage, aiResponse);
      
      if (orderData) {
        const response = await fetch('http://localhost:3000/api/order-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            user_id: userId,
            ...orderData
          })
        });

        if (response.ok) {
          const order = await response.json();
          await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ù–æ–º–µ—Ä: #${order.id}`);
          await this.notifyManager(order, userId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  parseOrderData(userMessage, aiResponse) {
    const products = {
      '–µ–∂–æ–≤–∏–∫': 'ezh120k',
      '–º—É—Ö–æ–º–æ—Ä': 'mhm100',
      '–∫–æ—Ä–¥–∏—Ü–µ–ø—Å': 'kor50',
      '4 –≤ 1': '4v1',
      '–∫—É—Ä—Å 4 –≤ 1': '4v1'
    };

    for (const [name, productId] of Object.entries(products)) {
      if (userMessage.toLowerCase().includes(name)) {
        return {
          items: { [productId]: 1 },
          total: 1100,
          fio: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          phone: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          address: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          comment: `–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram: ${userMessage}`
        };
      }
    }

    return null;
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  async notifyManager(order, userId) {
    const managerChatId = process.env.MANAGER_CHAT_ID || '54993853';
    
    const message = `
üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó –ß–ï–†–ï–ó TELEGRAM –ë–û–¢–ê!

üìã –ó–∞–∫–∞–∑ #${order.id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
üí∞ –°—É–º–º–∞: ${order.total} —Ä—É–±
üì¶ –¢–æ–≤–∞—Ä—ã: ${JSON.stringify(order.items)}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
    `;

    await this.bot.telegram.sendMessage(managerChatId, message);
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start() {
    await this.bot.launch();
    console.log('üöÄ Enhanced Telegram Bot –∑–∞–ø—É—â–µ–Ω');
    console.log('üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop() {
    await this.bot.stop();
    console.log('üõë Enhanced Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if (require.main === module) {
  const bot = new EnhancedTelegramBot();
  
  bot.start().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  });

  // Graceful shutdown
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    await bot.stop();
    process.exit(0);
  });
}

module.exports = { EnhancedTelegramBot };