import { Telegraf } from 'telegraf';
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import fetch from 'node-fetch';
dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY!
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUser(telegramId: string, userInfo?: any) {
  const { data: existingUser, error: selectError } = await supabase
    .from('users')
    .select('id, name')
    .eq('telegram_id', telegramId)
    .single();

  if (existingUser) {
    return existingUser;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: newUser, error: insertError } = await supabase
    .from('users')
    .insert([{ 
      telegram_id: telegramId, 
      name: userInfo?.first_name || userInfo?.username || 'User' 
    }])
    .select('id, name')
    .single();

  if (insertError) {
    throw new Error(`Error creating user: ${insertError.message}`);
  }

  return newUser;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É
async function saveMessage(userId: string, content: string, role: 'user' | 'assistant' = 'user') {
  const { error } = await supabase
    .from('messages')
    .insert([{
      user_id: userId,
      role,
      content,
      created_at: new Date().toISOString()
    }]);

  if (error) {
    console.error('Error saving message:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ò–ò API
async function callAI(message: string, context: any[], userId: string, telegramId?: string) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3001'}/api/ai`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message,
        context,
        source: 'telegram_bot',
        user_id: userId,
        telegram_id: telegramId
      })
    });

    if (!response.ok) {
      const text = await response.text().catch(() => '');
      throw new Error(`HTTP ${response.status}. ${text}`);
    }

    const data: any = await response.json().catch(() => ({}));
    return data.response || data.reply || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.';
  } catch (error: unknown) {
    console.error('AI API error:', error);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π deep-link –¥–ª—è Mini App
async function buildMiniAppLink(telegramId: string): Promise<string> {
  const botUsername = process.env.BOT_USERNAME || 'spor3s_bot';
  const baseUrl = (process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3001').replace(/\/$/, '');
  try {
    const resp = await fetch(`${baseUrl}/api/generate-auth-code`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ telegram_id: telegramId })
    });
    if (resp.ok) {
      const data: any = await resp.json();
      if (data?.auth_code) {
        return `https://t.me/${botUsername}?startapp=${encodeURIComponent(data.auth_code)}`;
      }
    }
  } catch {}
  return `https://t.me/${botUsername}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function createOrder(userId: string, orderData: any) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/order-simple`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: userId,
        ...orderData
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }

    const data: any = await response.json();
    return data;
  } catch (error: any) {
    console.error('Order API error:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
async function notifyManager(orderData: any, userInfo: any) {
  const managerChatId = process.env.MANAGER_CHAT_ID;
  if (!managerChatId) {
    console.log('MANAGER_CHAT_ID not set, skipping notification');
    return;
  }

  try {
    const message = `üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó –ß–ï–†–ï–ó –ë–û–¢–ê!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo.first_name} ${userInfo.last_name || ''} (@${userInfo.username || '–±–µ–∑ username'})
üÜî Telegram ID: ${userInfo.id}

üì¶ –¢–æ–≤–∞—Ä—ã: ${JSON.stringify(orderData.items)}
üí∞ –°—É–º–º–∞: ${orderData.total}‚ÇΩ
üìç –ê–¥—Ä–µ—Å: ${orderData.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
üë§ –§–ò–û: ${orderData.fio}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment || '–Ω–µ—Ç'}

üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    await bot.telegram.sendMessage(managerChatId, message);
  } catch (error: unknown) {
    console.error('Error notifying manager:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YouTube –ø–æ–¥–ø–∏—Å–∫–∏
async function verifyYouTubeSubscription(userId: string, channelId: string) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/subscribe-bonus`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: userId,
        channel_type: 'youtube'
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    const data = await response.json();
    return data;
  } catch (error: any) {
    console.error('YouTube verification error:', error);
    throw error;
  }
}

// /start <auth_code> - –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
bot.start(async (ctx) => {
  const parts = ctx.message.text.split(' ');
  if (parts.length === 2) {
    const auth_code = parts[1];
    try {
    // 1. –ù–∞–π—Ç–∏ auth_code –≤ tg_link_codes
    const { data: link } = await supabase
      .from('tg_link_codes')
      .select('user_id, telegram_id, expires_at')
      .eq('auth_code', auth_code)
      .single();

    if (!link) {
      return ctx.reply('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.');
    }

    if (new Date(link.expires_at) < new Date()) {
      return ctx.reply('‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫.');
    }

    // 2. –ü—Ä–∏–≤—è–∑–∞—Ç—å telegram_id –∫ users
    const { error: updateError } = await supabase
      .from('users')
      .update({ telegram_id: ctx.from.id.toString() })
      .eq('id', link.user_id);

    if (updateError) {
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: ' + updateError.message);
    }

      ctx.reply('‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º spor3s.');
    } catch (error) {
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: ' + error.message);
    }
  } else {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /start <–∫–æ–¥>\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä–∏–±–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫! üçÑ');
  }
});

// /verify_youtube @spor3s - –ø—Ä–æ–≤–µ—Ä–∫–∞ YouTube –ø–æ–¥–ø–∏—Å–∫–∏
bot.command('verify_youtube', async (ctx) => {
  try {
    const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–æ–Ω—É—Å –∑–∞ YouTube
    const { data: existingBonus } = await supabase
      .from('coin_transactions')
      .select('id')
      .eq('user_id', user.id)
      .eq('type', 'subscribe_youtube')
      .single();

    if (existingBonus) {
      return ctx.reply('‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª! +50 SC');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const instructions = `üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ YouTube –∫–∞–Ω–∞–ª @spor3s

üîç –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª: https://www.youtube.com/@spor3s
2Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç

üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @spor3s
‚Ä¢ –ö–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞" (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞)
‚Ä¢ –ò–ª–∏ —Å—Ç–∞—Ç—É—Å "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

üí∞ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: +50 SC

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`;

    await ctx.reply(instructions);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await supabase
      .from('youtube_verification_requests')
      .insert([{
        user_id: user.id,
        telegram_id: telegram_id,
        status: 'pending',
        created_at: new Date().toISOString()
      }]);

  } catch (error: any) {
    console.error('Error in verify_youtube command:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ' + error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YouTube –ø–æ–¥–ø–∏—Å–∫–∏
bot.on('photo', async (ctx) => {
  try {
    const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: verificationRequest } = await supabase
      .from('youtube_verification_requests')
      .select('id, status')
      .eq('user_id', user.id)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (!verificationRequest) {
      return ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify_youtube @spor3s –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const file = await bot.telegram.getFile(photo.file_id);
    const photoUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å URL —Ñ–æ—Ç–æ
    await supabase
      .from('youtube_verification_requests')
      .update({
        screenshot_url: photoUrl,
        status: 'screenshot_received',
        updated_at: new Date().toISOString()
      })
      .eq('id', verificationRequest.id);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    const managerChatId = process.env.MANAGER_CHAT_ID;
    if (managerChatId) {
      const managerMessage = `üì∏ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–û–í–ï–†–ö–£ YOUTUBE –ü–û–î–ü–ò–°–ö–ò!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.first_name} ${ctx.from.last_name || ''} (@${ctx.from.username || '–±–µ–∑ username'})
üÜî Telegram ID: ${ctx.from.id}
üÜî User ID: ${user.id}

üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${photoUrl}

‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /approve_youtube ${user.id}
‚ùå –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject_youtube ${user.id}

üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

      await bot.telegram.sendMessage(managerChatId, managerMessage);
    }

    await ctx.reply('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.');

  } catch (error: any) {
    console.error('Error processing photo:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
bot.command('approve_youtube', async (ctx) => {
  try {
    const parts = ctx.message.text.split(' ');
    if (parts.length !== 2) {
      return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve_youtube <user_id>');
    }

    const userId = parts[1];
    const managerChatId = process.env.MANAGER_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== managerChatId) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    const result = await verifyYouTubeSubscription(userId, '@spor3s');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await supabase
      .from('youtube_verification_requests')
      .update({
        status: 'approved',
        approved_at: new Date().toISOString(),
        approved_by: ctx.from.id.toString()
      })
      .eq('user_id', userId)
      .eq('status', 'screenshot_received');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('id', userId)
      .single();

    if (user?.telegram_id) {
      await bot.telegram.sendMessage(user.telegram_id, 
        '‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ YouTube –∫–∞–Ω–∞–ª @spor3s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +50 SC\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üçÑ'
      );
    }

    await ctx.reply(`‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}! +50 SC`);

  } catch (error: any) {
    console.error('Error approving YouTube subscription:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ' + error.message);
  }
});

bot.command('reject_youtube', async (ctx) => {
  try {
    const parts = ctx.message.text.split(' ');
    if (parts.length !== 2) {
      return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject_youtube <user_id>');
    }

    const userId = parts[1];
    const managerChatId = process.env.MANAGER_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== managerChatId) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await supabase
      .from('youtube_verification_requests')
      .update({
        status: 'rejected',
        rejected_at: new Date().toISOString(),
        rejected_by: ctx.from.id.toString()
      })
      .eq('user_id', userId)
      .eq('status', 'screenshot_received');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('id', userId)
      .single();

    if (user?.telegram_id) {
      await bot.telegram.sendMessage(user.telegram_id, 
        '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É YouTube –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\nüì∫ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @spor3s –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π /verify_youtube @spor3s'
      );
    }

    await ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);

  } catch (error: unknown) {
    console.error('Error rejecting YouTube subscription:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
  }
});

// /my_coins ‚Äî –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('my_coins', async (ctx) => {
  try {
  const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SC
    const { data: userLevel } = await supabase
      .from('user_levels')
      .select('current_sc_balance, current_level')
      .eq('user_id', user.id)
    .single();

    const balance = userLevel?.current_sc_balance || 0;
    const level = userLevel?.current_level || 'üå± –ù–æ–≤–∏—á–æ–∫';

    ctx.reply(`üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å Spor3s Coins: ${balance} SC\nüèÜ –£—Ä–æ–≤–µ–Ω—å: ${level}`);
  } catch (error: any) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + error.message);
  }
});

// /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
bot.command('help', async (ctx) => {
  const helpText = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ spor3s AI Assistant!

üçÑ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä–∏–±–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏:
‚Ä¢ –ï–∂–æ–≤–∏–∫ ‚Äî –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ú—É—Ö–æ–º–æ—Ä ‚Äî –¥–ª—è —Å–Ω–∞ –∏ —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞  
‚Ä¢ –ö–æ—Ä–¥–∏—Ü–µ–ø—Å ‚Äî –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –ö—É—Ä—Å 4 –≤ 1 ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/my_coins ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å SC
/verify_youtube @spor3s ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ YouTube (+50 SC)
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/start <–∫–æ–¥> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç

üõí –ú–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!`;

  ctx.reply(helpText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);
    const userMessage = ctx.message.text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await saveMessage(user.id, userMessage, 'user');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await ctx.replyWithChatAction('typing');

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: recentMessages } = await supabase
      .from('messages')
      .select('content')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(10);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    const messages = recentMessages?.reverse().map(msg => ({
      role: 'user',
      content: msg.content
    })) || [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({ role: 'user', content: userMessage });

    // –í—ã–∑—ã–≤–∞–µ–º –ò–ò —Å —Ç–µ–∫—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const aiResponse = await callAI(userMessage, messages, user.id, telegram_id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    await saveMessage(user.id, aiResponse, 'assistant');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
    if (aiResponse.includes('[order_now:') || aiResponse.includes('–∑–∞–∫–∞–∑') || aiResponse.includes('–æ—Ñ–æ—Ä–º–∏—Ç—å')) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      const appLink = await buildMiniAppLink(telegram_id);
      const keyboard = {
        inline_keyboard: [[
          { text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', url: appLink }
        ]]
      };
      await ctx.reply(aiResponse, { reply_markup: keyboard });
    } else {
      const appLink = await buildMiniAppLink(telegram_id);
      await ctx.reply(`${aiResponse}\n\n–û—Ñ–æ—Ä–º–∏—Ç—å –≤ Mini App: ${appLink}`);
    }

  } catch (error: any) {
    console.error('Error processing message:', error);
    ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action('create_order', async (ctx) => {
  try {
    const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞
    const orderForm = {
      inline_keyboard: [
        [{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞', callback_data: 'order_form' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_order' }]
      ]
    };

    await ctx.editMessageText('üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
      reply_markup: orderForm
    });

  } catch (error: any) {
    console.error('Error creating order form:', error);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞');
  }
});

bot.action('order_form', async (ctx) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞
    // –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await ctx.editMessageText(`üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ó–ê–ö–ê–ó:
–¢–æ–≤–∞—Ä—ã: [—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤]
–°—É–º–º–∞: [—Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö]
–§–ò–û: [–≤–∞—à–µ –∏–º—è]
–¢–µ–ª–µ—Ñ–æ–Ω: [–≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω]
–ê–¥—Ä–µ—Å: [–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏]
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]

–ü—Ä–∏–º–µ—Ä:
–ó–ê–ö–ê–ó:
–¢–æ–≤–∞—Ä—ã: –ï–∂–æ–≤–∏–∫ 100–≥, –ú—É—Ö–æ–º–æ—Ä 30–≥
–°—É–º–º–∞: 2500
–§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67
–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –∫–≤. 1
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ 18:00`);

  } catch (error: unknown) {
    console.error('Error showing order form:', error);
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞');
  }
});

bot.action('cancel_order', async (ctx) => {
  try {
    await ctx.editMessageText('‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ò–ò!');
  } catch (error: unknown) {
    console.error('Error canceling order:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–∞–∑–∞
bot.hears(/–ó–ê–ö–ê–ó:/i, async (ctx) => {
  try {
    const telegram_id = ctx.from.id.toString();
    const user = await getOrCreateUser(telegram_id, ctx.from);
    const orderText = ctx.message.text;

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const orderData = parseOrderData(orderText);
    
    if (!orderData) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n–ó–ê–ö–ê–ó:\n–¢–æ–≤–∞—Ä—ã: ...\n–°—É–º–º–∞: ...\n–§–ò–û: ...\n–¢–µ–ª–µ—Ñ–æ–Ω: ...\n–ê–¥—Ä–µ—Å: ...');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderResult: any = await createOrder(user.id, orderData);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await notifyManager(orderResult.order, ctx.from);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderResult.order.id}
üí∞ –°—É–º–º–∞: ${orderResult.order.total}‚ÇΩ
üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üçÑ`);

  } catch (error: unknown) {
    console.error('Error processing order:', error);
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
function parseOrderData(orderText: string) {
  try {
    const lines = orderText.split('\n');
    const orderData: any = {};

    for (const line of lines) {
      if (line.includes('–¢–æ–≤–∞—Ä—ã:')) {
        orderData.items = line.split('–¢–æ–≤–∞—Ä—ã:')[1].trim();
      } else if (line.includes('–°—É–º–º–∞:')) {
        orderData.total = parseInt(line.split('–°—É–º–º–∞:')[1].trim());
      } else if (line.includes('–§–ò–û:')) {
        orderData.fio = line.split('–§–ò–û:')[1].trim();
      } else if (line.includes('–¢–µ–ª–µ—Ñ–æ–Ω:')) {
        orderData.phone = line.split('–¢–µ–ª–µ—Ñ–æ–Ω:')[1].trim();
      } else if (line.includes('–ê–¥—Ä–µ—Å:')) {
        orderData.address = line.split('–ê–¥—Ä–µ—Å:')[1].trim();
      } else if (line.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')) {
        orderData.comment = line.split('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')[1].trim();
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!orderData.items || !orderData.total || !orderData.fio || !orderData.phone || !orderData.address) {
      return null;
    }

    return orderData;
  } catch (error) {
    console.error('Error parsing order data:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: any, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

bot.launch();
console.log('ü§ñ Spor3s AI Bot started successfully!');

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 