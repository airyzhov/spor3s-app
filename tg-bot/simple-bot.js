const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUser(telegramId, userInfo) {
  const { data: existingUser, error: selectError } = await supabase
    .from('users')
    .select('id, name')
    .eq('telegram_id', telegramId)
    .single();

  if (existingUser) {
    return existingUser;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: newUser, error: insertError } = await supabase
    .from('users')
    .insert([{ 
      telegram_id: telegramId, 
      name: userInfo?.first_name || userInfo?.username || 'User' 
    }])
    .select('id, name')
    .single();

  if (insertError) {
    throw new Error(`Error creating user: ${insertError.message}`);
  }

  return newUser;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ò–ò API
async function callAI(message, userId, telegramId) {
  try {
    const response = await fetch(`https://humane-jaguar-annually.ngrok-free.app/api/ai-simple`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message,
        user_id: userId,
        telegram_id: telegramId
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    return data.response || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.';
  } catch (error) {
    console.error('AI API error:', error);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// /start –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  const parts = ctx.message.text.split(' ');
  if (parts.length === 2) {
    const auth_code = parts[1];
    try {
      // –ù–∞–π—Ç–∏ auth_code –≤ tg_link_codes
      const { data: link } = await supabase
        .from('tg_link_codes')
        .select('user_id, telegram_id, expires_at')
        .eq('auth_code', auth_code)
        .single();

      if (!link) {
        return ctx.reply('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.');
      }

      if (new Date(link.expires_at) < new Date()) {
        return ctx.reply('‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .update({ telegram_id: ctx.from.id.toString() })
        .eq('id', link.user_id);

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await supabase
        .from('tg_link_codes')
        .update({ is_used: true, used_at: new Date().toISOString() })
        .eq('auth_code', auth_code);

      await ctx.reply('üéâ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –±–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
    } catch (error) {
      console.error('Error linking account:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else {
    const telegramId = ctx.from.id.toString();
    const user = await getOrCreateUser(telegramId, ctx.from);
    
    const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spor3s!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≥—Ä–∏–±–Ω—ã–º –¥–æ–±–∞–≤–∫–∞–º.

üçÑ –£ –Ω–∞—Å –µ—Å—Ç—å:
‚Ä¢ –ï–∂–æ–≤–∏–∫ –≥—Ä–µ–±–µ–Ω—á–∞—Ç—ã–π - –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ú—É—Ö–æ–º–æ—Ä –∫—Ä–∞—Å–Ω—ã–π - –¥–ª—è —Å–Ω–∞ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è  
‚Ä¢ –ö–æ—Ä–¥–∏—Ü–µ–ø—Å - –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –¶–∏—Å—Ç–æ–∑–∏—Ä–∞ - –¥–ª—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!`;

    await ctx.reply(welcomeMessage);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const user = await getOrCreateUser(telegramId, ctx.from);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    const aiResponse = await callAI(ctx.message.text, user.id, telegramId);
    
    await ctx.reply(aiResponse);
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('ü§ñ Spor3s Bot –∑–∞–ø—É—â–µ–Ω!');
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
});

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

