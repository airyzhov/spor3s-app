// –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∂–∏–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É

require('dotenv').config({ path: 'env.local' });
const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');

// –î–æ–±–∞–≤–ª—è–µ–º fetch –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Node.js
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

class EnhancedTelegramBot {
  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
    this.supabase = createClient(
      process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      const telegramId = ctx.from.id.toString();
      const name = ctx.from.first_name;
      const args = ctx.message?.text?.split(' ').slice(1) || [];

      try {
        let user = null;

        if (args.length > 0) {
          const authCode = args[0].trim();
          const linked = await this.linkBotWithCode(authCode, telegramId);
          if (linked) {
            user = linked;
            await ctx.reply(
              `üéâ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!

–¢–µ–ø–µ—Ä—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –±–æ—Ç –∑–Ω–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Ç—É—Ç –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${process.env.NEXT_PUBLIC_BASE_URL || 'https://spor3s.app'}`
            );
          } else {
            await ctx.reply('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');
          }
        }

        if (!user) {
          user = await this.getOrCreateUser(telegramId, name);
        }
        
        const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spor3s!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∏–±–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫:

üçÑ **–ï–∂–æ–≤–∏–∫** ‚Äî –¥–ª—è –ø–∞–º—è—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
üò¥ **–ú—É—Ö–æ–º–æ—Ä** ‚Äî –¥–ª—è —Å–Ω–∞ –∏ —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞  
‚ö° **–ö–æ—Ä–¥–∏—Ü–µ–ø—Å** ‚Äî –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
üåü **–ö—É—Ä—Å 4 –≤ 1** ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!

üí° **–ö–æ–º–∞–Ω–¥—ã:**
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
/my_coins ‚Äî –≤–∞—à–∏ Spor3s Coins
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        `;
        
        await ctx.reply(welcomeMessage);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        if (user?.id) {
        await this.saveMessage(user.id, 'system', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞', 'telegram_bot');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      const helpMessage = `
ü§ñ **Spor3s AI Assistant**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
‚Ä¢ –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –¥–æ–±–∞–≤–æ–∫
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ Spor3s Coins

**–ö–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/my_coins ‚Äî –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –µ–∂–æ–≤–∏–∫–µ"
‚Ä¢ "–•–æ—á—É –∫—É–ø–∏—Ç—å –º—É—Ö–æ–º–æ—Ä"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –º–æ–Ω–µ—Ç?"
‚Ä¢ "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–∫—É"

üéØ **–¶–µ–ª—å:** –ü–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –≥—Ä–∏–±–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!
        `;
      
      await ctx.reply(helpMessage);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /my_coins
    this.bot.command('my_coins', async (ctx) => {
      const telegramId = ctx.from.id.toString();
      
      try {
        const user = await this.getOrCreateUser(telegramId, ctx.from.first_name);
        const coins = await this.getUserCoins(user.id);
        
        const coinsMessage = `
üí∞ **–í–∞—à–∏ Spor3s Coins**

ü™ô **–ë–∞–ª–∞–Ω—Å:** ${coins.balance} SC
üìä **–£—Ä–æ–≤–µ–Ω—å:** ${coins.level}
üéØ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:** ${coins.nextLevel} SC

üí° **–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫–∏–Ω—ã: +10 SC
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç: +50 SC
‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏: +100 SC
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã: +200 SC

üõí **–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:**
‚Ä¢ –°–∫–∏–¥–∫–∏ –¥–æ 30% –Ω–∞ –∑–∞–∫–∞–∑—ã
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        `;
        
        await ctx.reply(coinsMessage);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /my_coins:', error);
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–∞—Ö.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /order
    this.bot.command('order', async (ctx) => {
      const orderMessage = `
üõí **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:

1Ô∏è‚É£ **–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑** ‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç
2Ô∏è‚É£ **–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞** ‚Äî —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
3Ô∏è‚É£ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** ‚Äî –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –µ–∂–æ–≤–∏–∫"
‚Ä¢ "–ö—É–ø–∏—Ç—å –º—É—Ö–æ–º–æ—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
‚Ä¢ "–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å 4 –≤ 1"
        `;
      
      await ctx.reply(orderMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const telegramId = ctx.from.id.toString();
      const message = ctx.message.text;
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.getOrCreateUser(telegramId, ctx.from.first_name);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.saveMessage(user.id, 'user', message, 'telegram_bot');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const context = await this.getUserContext(user.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI API
        const aiResponse = await this.callAI(message, context);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        await this.saveMessage(user.id, 'assistant', aiResponse, 'telegram_bot');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ add_to_cart –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const addToCartMatches = aiResponse.match(/\[add_to_cart:([\w-]+)\]/g);
        const hasAddToCart = addToCartMatches && addToCartMatches.length > 0;
        
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const cleanResponse = aiResponse.replace(/\[add_to_cart:[\w-]+\]/g, '').replace(/\[remove_from_cart:[\w-]+\]/g, '').trim();
        
        if (hasAddToCart) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          const productIds = addToCartMatches.map(tag => tag.match(/\[add_to_cart:([\w-]+)\]/)[1]);
          const cartUrl = `https://humane-jaguar-annually.ngrok-free.app/cart?products=${productIds.join(',')}`;
          
          // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          const keyboard = {
            inline_keyboard: [[
              {
                text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                url: cartUrl
              }
            ]]
          };
          
          await ctx.reply(cleanResponse, { reply_markup: keyboard });
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏
          await ctx.reply(cleanResponse);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
        if (this.shouldCreateOrder(message, aiResponse)) {
          await this.handleOrderCreation(user.id, message, aiResponse, ctx);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    this.bot.action(/order_(.+)/, async (ctx) => {
      const productId = ctx.match[1];
      
      try {
        const user = await this.getOrCreateUser(ctx.from.id.toString(), ctx.from.first_name);
        
        // –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑
        const orderData = {
          user_id: user.id,
          items: { [productId]: 1 },
          total: 1100, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
          fio: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          phone: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          address: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          comment: `–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram: ${productId}`
        };
        
        const response = await fetch('http://localhost:3000/api/order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(orderData)
        });
        
        if (response.ok) {
          const order = await response.json();
          await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ù–æ–º–µ—Ä: #${order.id}`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
          await this.notifyManager(order, user.id);
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.');
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getOrCreateUser(telegramId, name) {
    const { data: existingUser } = await this.supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (existingUser) {
      return existingUser;
    }

    const { data: newUser } = await this.supabase
      .from('users')
      .insert([{
        telegram_id: telegramId,
        name: name || 'Unknown',
        created_at: new Date().toISOString()
      }])
      .select()
      .single();

    return newUser;
  }

  async linkBotWithCode(authCode, telegramId) {
    if (!authCode) return null;

    const { data: codeRow } = await this.supabase
      .from('tg_link_codes')
      .select('id, user_id, is_used, expires_at, telegram_id')
      .eq('auth_code', authCode)
      .maybeSingle();

    if (!codeRow) {
      return null;
    }

    const expiresAt = codeRow.expires_at ? new Date(codeRow.expires_at) : null;
    if (codeRow.is_used || (expiresAt && expiresAt.getTime() < Date.now())) {
      return null;
    }

    if (codeRow.telegram_id && codeRow.telegram_id !== telegramId) {
      return null;
    }

    const { data: user } = await this.supabase
      .from('users')
      .select('*')
      .eq('id', codeRow.user_id)
      .maybeSingle();

    if (!user) {
      return null;
    }

    await this.supabase
      .from('users')
      .update({ telegram_id: telegramId, updated_at: new Date().toISOString() })
      .eq('id', user.id);

    await this.supabase
      .from('tg_link_codes')
      .update({ is_used: true, used_at: new Date().toISOString(), telegram_id: telegramId })
      .eq('id', codeRow.id);

    return { ...user, telegram_id: telegramId };
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  async saveMessage(userId, role, content, source) {
    await this.supabase
      .from('messages')
      .insert([{
        user_id: userId,
        role: role,
        content: content,
        source: source,
        created_at: new Date().toISOString()
      }]);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserContext(userId) {
    const { data: messages } = await this.supabase
      .from('messages')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);

    const { data: orders } = await this.supabase
      .from('orders')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    return {
      messages: messages || [],
      orders: orders || [],
      user_id: userId
    };
  }

  // –í—ã–∑–æ–≤ AI API —Å ngrok –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  async callAI(message, context) {
    const baseUrl = 'http://localhost:3000';
    try {
      console.log('ü§ñ –í—ã–∑—ã–≤–∞–µ–º AI API:', `${baseUrl}/api/ai`);
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message);
      console.log('üë§ User ID:', context?.user_id);
      
      const response = await fetch(`${baseUrl}/api/test-api`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': 'true',
          'User-Agent': 'spor3s-bot/1.0'
        },
        body: JSON.stringify({
          message,
          context: context?.messages || [],
          source: 'telegram_bot',
          user_id: context?.user_id || null
        }),
        timeout: 10000
      });
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå AI API –æ—à–∏–±–∫–∞:', response.status, errorText);
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      const data = await response.json();
      console.log('‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', data.response?.substring(0, 100) + '...');
      
      // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ API
      return data.response || data.reply || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    } catch (e) {
      console.error('‚ùå callAI error:', e?.message || e);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserCoins(userId) {
    const { data: userLevel } = await this.supabase
      .from('user_levels')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (userLevel) {
      return {
        balance: userLevel.sc_balance || 0,
        level: userLevel.level || 1,
        nextLevel: Math.max(0, (userLevel.level || 1) * 100 - (userLevel.sc_balance || 0))
      };
    }

    return {
      balance: 0,
      level: 1,
      nextLevel: 100
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  shouldCreateOrder(userMessage, aiResponse) {
    const orderKeywords = [
      '–∑–∞–∫–∞–∑', '–∫—É–ø–∏—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∫–æ—Ä–∑–∏–Ω–∞', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å',
      '–æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑', '—Å–¥–µ–ª–∞–π –∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∂–∏', '–æ—Ç–ø—Ä–∞–≤—å', '–∫—É–ø–∏',
      '–µ–∂–æ–≤–∏–∫ –ø–æ—Ä–æ—à–æ–∫ 1 –º–µ—Å—è—Ü', '–µ–∂–æ–≤–∏–∫ –ø–æ—Ä–æ—à–æ–∫ –º–µ—Å—è—Ü',
      '–µ–∂–æ–≤–∏–∫ –∫–∞–ø—Å—É–ª—ã', '–º—É—Ö–æ–º–æ—Ä –∫–∞–ø—Å—É–ª—ã', '–∫–æ—Ä–¥–∏—Ü–µ–ø—Å –ø–æ—Ä–æ—à–æ–∫'
    ];
    
    const hasOrderIntent = orderKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword) ||
      aiResponse.toLowerCase().includes(keyword)
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const hasContactInfo = /[–∞-—è—ë]{2,}\s+[–∞-—è—ë]{2,}/i.test(userMessage) && 
                          /\d{10,}/.test(userMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥—Ä–µ—Å–∞
    const hasAddress = /[–∞-—è—ë]+\s+[–∞-—è—ë]+\s+\d+/.test(userMessage);
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞:', {
      hasOrderIntent,
      hasContactInfo,
      hasAddress,
      message: userMessage.substring(0, 100)
    });
    
    return hasOrderIntent && (hasContactInfo || hasAddress);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  async handleOrderCreation(userId, userMessage, aiResponse, ctx) {
    try {
      const orderData = this.parseOrderData(userMessage, aiResponse);
      
      if (orderData) {
        const response = await fetch('http://localhost:3000/api/order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            user_id: userId,
            ...orderData
          })
        });

        if (response.ok) {
          const order = await response.json();
          await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ù–æ–º–µ—Ä: #${order.id}`);
          await this.notifyManager(order, userId);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  parseOrderData(userMessage, aiResponse) {
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', userMessage);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    let productId = null;
    let productName = '';
    let quantity = 1;
    
    if (/–µ–∂–æ–≤–∏–∫.*–ø–æ—Ä–æ—à–∫/i.test(userMessage)) {
      productId = 'ezh100';
      productName = '–ï–∂–æ–≤–∏–∫ –ø–æ—Ä–æ—à–æ–∫ 100–≥';
    } else if (/–µ–∂–æ–≤–∏–∫.*–∫–∞–ø—Å—É–ª/i.test(userMessage)) {
      productId = 'ezh120k';
      productName = '–ï–∂–æ–≤–∏–∫ –∫–∞–ø—Å—É–ª—ã 120—à—Ç';
    } else if (/–µ–∂–æ–≤–∏–∫/i.test(userMessage)) {
      productId = 'ezh120k';
      productName = '–ï–∂–æ–≤–∏–∫ –∫–∞–ø—Å—É–ª—ã 120—à—Ç';
    } else if (/–º—É—Ö–æ–º–æ—Ä.*–∫–∞–ø—Å—É–ª/i.test(userMessage)) {
      productId = 'mhm60k';
      productName = '–ú—É—Ö–æ–º–æ—Ä –∫–∞–ø—Å—É–ª—ã 60—à—Ç';
    } else if (/–º—É—Ö–æ–º–æ—Ä/i.test(userMessage)) {
      productId = 'mhm30';
      productName = '–ú—É—Ö–æ–º–æ—Ä –ø–æ—Ä–æ—à–æ–∫ 30–≥';
    } else if (/–∫–æ—Ä–¥–∏—Ü–µ–ø—Å.*–ø–æ—Ä–æ—à–∫/i.test(userMessage)) {
      productId = 'kor50';
      productName = '–ö–æ—Ä–¥–∏—Ü–µ–ø—Å –ø–æ—Ä–æ—à–æ–∫ 50–≥';
    } else if (/–∫–æ—Ä–¥–∏—Ü–µ–ø—Å/i.test(userMessage)) {
      productId = 'kor50';
      productName = '–ö–æ—Ä–¥–∏—Ü–µ–ø—Å –ø–æ—Ä–æ—à–æ–∫ 50–≥';
    } else if (/4.*–≤.*1|–∫–æ–º–ø–ª–µ–∫—Å/i.test(userMessage)) {
      productId = '4v1';
      productName = '–ö–æ–º–ø–ª–µ–∫—Å 4–≤1';
    }
    
    if (!productId) {
      console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return null;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û
    const fioMatch = userMessage.match(/([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/);
    const fio = fioMatch ? fioMatch[1] : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    const phoneMatch = userMessage.match(/(\d{10,})/);
    const phone = phoneMatch ? phoneMatch[1] : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å
    const addressMatch = userMessage.match(/([–∞-—è—ë]+\s+[–∞-—è—ë]+\s+\d+)/i);
    const address = addressMatch ? addressMatch[1] : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫
    let period = '1 –º–µ—Å—è—Ü';
    if (/3.*–º–µ—Å—è—Ü/i.test(userMessage)) {
      period = '3 –º–µ—Å—è—Ü–∞';
      if (productId === 'ezh100') productId = 'ezh300';
      if (productId === 'mhm30') productId = 'mhm100';
      if (productId === 'kor50') productId = 'kor150';
    } else if (/6.*–º–µ—Å—è—Ü/i.test(userMessage)) {
      period = '6 –º–µ—Å—è—Ü–µ–≤';
      if (productId === '4v1') productId = '4v1-6';
    }
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', {
      productId,
      productName,
      fio,
      phone,
      address,
      period
    });
    
    return {
      items: { [productId]: quantity },
      total: 1100, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞, –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∞ –≤ API
      fio: fio,
      phone: phone,
      address: address,
      comment: `–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram: ${productName} –Ω–∞ ${period}. ${userMessage}`
    };
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  async notifyManager(order, userId) {
    const managerChatId = process.env.MANAGER_CHAT_ID || '54993853';
    
    const message = `
üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó –ß–ï–†–ï–ó TELEGRAM –ë–û–¢–ê!

üìã –ó–∞–∫–∞–∑ #${order.id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
üí∞ –°—É–º–º–∞: ${order.total} —Ä—É–±
üì¶ –¢–æ–≤–∞—Ä—ã: ${JSON.stringify(order.items)}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
    `;

    await this.bot.telegram.sendMessage(managerChatId, message);
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start() {
    await this.bot.launch();
    console.log('üöÄ Enhanced Telegram Bot –∑–∞–ø—É—â–µ–Ω');
    console.log('üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop() {
    await this.bot.stop();
    console.log('üõë Enhanced Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if (require.main === module) {
  
  const bot = new EnhancedTelegramBot();
  
  bot.start().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  });

  // Graceful shutdown
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    await bot.stop();
    process.exit(0);
  });
}

module.exports = { EnhancedTelegramBot };