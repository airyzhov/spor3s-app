import { NextRequest, NextResponse } from "next/server";
import { supabaseServer } from "../../supabaseServerClient";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { user_id, order_id, ...surveyFields } = body;
    if (!user_id) {
      return NextResponse.json({ error: "user_id required" }, { status: 400 });
    }

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    const now = new Date();
    const weekStart = new Date(now);
    weekStart.setDate(now.getDate() - now.getDay()); // –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–≤—Å–µ–≥–¥–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekStart.setHours(0, 0, 0, 0);
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 7);
    const { data: existing, error: existingError } = await supabaseServer
      .from("surveys")
      .select("id")
      .eq("user_id", user_id)
      .gte("created_at", weekStart.toISOString())
      .lt("created_at", weekEnd.toISOString());
    if (existingError) {
      return NextResponse.json({ error: existingError.message }, { status: 500 });
    }
    if (existing && existing.length > 0) {
      return NextResponse.json({ error: "–û–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ" }, { status: 400 });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ SC (100 SC –∑–∞ –æ–ø—Ä–æ—Å—ã)
    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
    const { data: txs, error: txsError } = await supabaseServer
      .from("sc_transactions")
      .select("amount, transaction_type, created_at")
      .eq("user_id", user_id)
      .eq("source_type", "survey")
      .gte("created_at", monthStart.toISOString());
    if (txsError) {
      return NextResponse.json({ error: txsError.message }, { status: 500 });
    }
    const monthTotal = (txs || []).reduce((sum, tx) => sum + (tx.amount || 0), 0);
    const SC_AMOUNT = 25;
    const MONTH_LIMIT = 100;
    if (monthTotal + SC_AMOUNT > MONTH_LIMIT) {
      return NextResponse.json({ error: "–õ–∏–º–∏—Ç SC –∑–∞ –æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç" }, { status: 400 });
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
    const { data: survey, error: surveyError } = await supabaseServer
      .from("surveys")
      .insert([{ user_id, order_id, ...surveyFields, created_at: new Date().toISOString() }])
      .select()
      .single();
    if (surveyError) {
      return NextResponse.json({ error: surveyError.message }, { status: 500 });
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    
    const { data: existingActivity, error: activityError } = await supabaseServer
      .from("daily_activities")
      .select("id, weekly_survey")
      .eq("user_id", user_id)
      .eq("date", todayStr)
      .single();

    if (activityError && activityError.code !== 'PGRST116') {
      return NextResponse.json({ error: activityError.message }, { status: 500 });
    }

    if (existingActivity && existingActivity.weekly_survey) {
      return NextResponse.json({ error: "–û–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω!" }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityData = {
      user_id,
      date: todayStr,
      weekly_survey: true,
      sc_earned: 25 // 25 SC –∑–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É
    };

    if (existingActivity) {
      const { error: updateActivityError } = await supabaseServer
        .from("daily_activities")
        .update(activityData)
        .eq("id", existingActivity.id);
      if (updateActivityError) {
        return NextResponse.json({ error: updateActivityError.message }, { status: 500 });
      }
    } else {
      const { error: insertActivityError } = await supabaseServer
        .from("daily_activities")
        .insert([activityData]);
      if (insertActivityError) {
        return NextResponse.json({ error: insertActivityError.message }, { status: 500 });
      }
    }

    // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const { data: userLevel, error: levelError } = await supabaseServer
      .from("user_levels")
      .select("*")
      .eq("user_id", user_id)
      .single();

    if (levelError && levelError.code === 'PGRST116') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ —É—Ä–æ–≤–Ω–µ–π, —Å–æ–∑–¥–∞–µ–º
      const { error: initError } = await supabaseServer
        .from("user_levels")
        .insert([{
          user_id,
          current_level: 'üå± –ù–æ–≤–∏—á–æ–∫',
          level_code: 'novice',
          current_sc_balance: 0,
          total_sc_earned: 0,
          total_sc_spent: 0
        }]);
      if (initError) {
        return NextResponse.json({ error: initError.message }, { status: 500 });
      }
    }

    // 6. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: updatedUserLevel, error: getUpdatedError } = await supabaseServer
      .from("user_levels")
      .select("*")
      .eq("user_id", user_id)
      .single();

    if (getUpdatedError) {
      return NextResponse.json({ error: getUpdatedError.message }, { status: 500 });
    }

    return NextResponse.json({ 
      success: true, 
      survey,
      scEarned: 25,
      currentBalance: updatedUserLevel.current_sc_balance,
      level: updatedUserLevel.current_level,
      levelCode: updatedUserLevel.level_code
    });
  } catch (e) {
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã" }, { status: 500 });
  }
} 