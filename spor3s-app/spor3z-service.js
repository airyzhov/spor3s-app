// –°–ª—É–∂–±–∞ 24/7 –¥–ª—è @spor3z
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
require('dotenv').config({ path: 'env.local' });

async function startSpor3zService() {
  console.log('ü§ñ –ó–ê–ü–£–°–ö –°–õ–£–ñ–ë–´ 24/7 @SPOR3Z');
  console.log('=================================');
  console.log('üïê –°–ª—É–∂–±–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ');
  console.log('üì± –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('');

  let reconnectAttempts = 0;
  const maxReconnectAttempts = 10;

  async function connectAndListen() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      const client = new TelegramClient(
        new StringSession(process.env.TELEGRAM_SESSION_STRING),
        parseInt(process.env.TELEGRAM_API_ID),
        process.env.TELEGRAM_API_HASH
      );

      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
      await client.start();
      
      const me = await client.getMe();
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: ${me.firstName} ${me.lastName || ''}`);
      console.log(`üÜî ID: ${me.id}`);
      console.log(`@username: ${me.username || '–Ω–µ—Ç'}`);
      console.log('');

      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      reconnectAttempts = 0;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
      let messageCount = 0;
      const serviceHandler = async (update) => {
        try {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (update.className === 'UpdateNewMessage' && update.message) {
            const message = update.message;
            
            // –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            if (!message.out && message.message && message.message.trim()) {
              messageCount++;
              
              console.log(`\nüì® –°–û–û–ë–©–ï–ù–ò–ï #${messageCount}`);
              console.log(`üë§ –û—Ç: ${message.senderId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
              console.log(`üìù –¢–µ–∫—Å—Ç: "${message.message}"`);
              console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
              
              try {
                const response = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message.message}"\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç @spor3z!`;
                
                await client.sendMessage(message.chatId, {
                  message: response
                });

                console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
              } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
              }
            }
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }
      };

      client.addEventHandler(serviceHandler);

      console.log('üéØ –°–ª—É–∂–±–∞ 24/7 –∑–∞–ø—É—â–µ–Ω–∞!');
      console.log('üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
      console.log('');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      process.on('SIGINT', async () => {
        console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã...');
        await client.disconnect();
        process.exit(0);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      client.session.setDC = function(dcId, serverAddress, port) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ DC ${dcId}: ${serverAddress}:${port}`);
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${reconnectAttempts} —á–µ—Ä–µ–∑ ${delay/1000} —Å–µ–∫—É–Ω–¥...`);
        
        setTimeout(() => {
          connectAndListen();
        }, delay);
      } else {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        process.exit(1);
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
  await connectAndListen();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.log('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
  setTimeout(() => {
    startSpor3zService();
  }, 5000);
});

process.on('unhandledRejection', (reason, promise) => {
  console.log('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', reason);
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
  setTimeout(() => {
    startSpor3zService();
  }, 5000);
});

// –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
startSpor3zService().catch(console.error);
