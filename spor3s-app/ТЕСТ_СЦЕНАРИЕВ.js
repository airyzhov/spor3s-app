// üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–ï–í spor3s-app
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í');
console.log('======================================');

class SporesAppTester {
  constructor() {
    this.testResults = [];
    this.mockTelegramId = '638358977'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ª–æ–≥–æ–≤
  }

  // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async testTelegramAuth() {
    console.log('\nüîê –¢–ï–°–¢: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
    console.log('===================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
    const hasTelegramWebApp = !!(window.Telegram && window.Telegram.WebApp);
    this.logTest('Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω', hasTelegramWebApp);
    
    if (hasTelegramWebApp) {
      const user = window.Telegram.WebApp.initDataUnsafe?.user;
      this.logTest('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', !!user);
      
      if (user) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
          id: user.id,
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username
        });
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API init-user
    await this.testInitUserAPI();
  }

  async testInitUserAPI() {
    console.log('\nüì° –¢–ï–°–¢: API /init-user');
    console.log('========================');
    
    try {
      const response = await fetch('/api/init-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegram_id: this.mockTelegramId })
      });
      
      this.logTest('API init-user –æ—Ç–≤–µ—á–∞–µ—Ç', response.ok);
      
      if (response.ok) {
        const data = await response.json();
        this.logTest('–ü–æ–ª—É—á–µ–Ω user ID', !!data.id);
        console.log('‚úÖ User ID:', data.id);
      } else {
        const errorData = await response.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ API:', errorData);
      }
    } catch (error) {
      this.logTest('API init-user –¥–æ—Å—Ç—É–ø–µ–Ω', false);
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    }
  }

  // –¢–µ—Å—Ç –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async testGamificationFeatures() {
    console.log('\nüéÆ –¢–ï–°–¢: –§—É–Ω–∫—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('=============================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–ª–∞–Ω—Å–∞
    const balanceElements = document.querySelectorAll('[style*="Spor3s"], [style*="–±–∞–ª–∞–Ω—Å"]');
    this.logTest('–≠–ª–µ–º–µ–Ω—Ç—ã –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–π–¥–µ–Ω—ã', balanceElements.length > 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    const levelElements = document.querySelectorAll('[style*="–£—Ä–æ–≤–µ–Ω—å"], [style*="XP"]');
    this.logTest('–≠–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–≤–Ω–µ–π –Ω–∞–π–¥–µ–Ω—ã', levelElements.length > 0);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è Road Map
    const mockMetrics = {
      memory: 7,
      sleep: 6,
      energy: 8,
      stress: 4
    };
    
    console.log('üìä Mock –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Road Map:', mockMetrics);
    this.logTest('–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Road Map –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã', true);
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  testEnvironments() {
    console.log('\nüåç –¢–ï–°–¢: –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('=============================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const userAgent = navigator.userAgent;
    const isTelegramApp = userAgent.includes('Telegram');
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
    const isLocalhost = window.location.hostname === 'localhost';
    const isNgrok = window.location.hostname.includes('ngrok');
    
    this.logTest('–ó–∞–ø—É—â–µ–Ω–æ –≤ Telegram', isTelegramApp);
    this.logTest('–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', isMobile);
    this.logTest('–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', isLocalhost);
    this.logTest('–î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ ngrok', isNgrok);
    
    console.log('üîç User Agent:', userAgent);
    console.log('üåê URL:', window.location.href);
  }

  // –¢–µ—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  testUIElements() {
    console.log('\nüé® –¢–ï–°–¢: UI —ç–ª–µ–º–µ–Ω—Ç—ã');
    console.log('====================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const chatInput = document.querySelector('input[placeholder*="–≥—Ä–∏–±–Ω—ã–º"]');
    const footerButtons = document.querySelectorAll('span[style*="cursor: pointer"]');
    const productButtons = document.querySelectorAll('button');
    
    this.logTest('–ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ', !!chatInput);
    this.logTest('Footer –∫–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã', footerButtons.length >= 3);
    this.logTest('–ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã', productButtons.length > 5);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const bodyStyle = window.getComputedStyle(document.body);
    const hasBackgroundImage = bodyStyle.backgroundImage.includes('psy-forest-bg');
    this.logTest('–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', hasBackgroundImage);
  }

  // –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  async testAllAPIs() {
    console.log('\nüì° –¢–ï–°–¢: –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã');
    console.log('==========================');
    
    const apis = [
      { name: 'Products', endpoint: '/api/products', method: 'GET' },
      { name: 'AI Chat', endpoint: '/api/ai', method: 'POST', body: { messages: [{ role: 'user', content: 'test' }] } },
      { name: 'Init User', endpoint: '/api/init-user', method: 'POST', body: { telegram_id: this.mockTelegramId } },
    ];
    
    for (const api of apis) {
      try {
        const options = {
          method: api.method,
          headers: { 'Content-Type': 'application/json' }
        };
        
        if (api.body) {
          options.body = JSON.stringify(api.body);
        }
        
        const response = await fetch(api.endpoint, options);
        this.logTest(`${api.name} API —Ä–∞–±–æ—Ç–∞–µ—Ç`, response.ok);
        
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ ${api.name}:`, Object.keys(data));
        }
      } catch (error) {
        this.logTest(`${api.name} API –¥–æ—Å—Ç—É–ø–µ–Ω`, false);
        console.log(`‚ùå ${api.name} –æ—à–∏–±–∫–∞:`, error.message);
      }
    }
  }

  // –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  testMobileAdaptation() {
    console.log('\nüì± –¢–ï–°–¢: –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è');
    console.log('============================');
    
    const viewport = document.querySelector('meta[name="viewport"]');
    this.logTest('Viewport –º–µ—Ç–∞-—Ç–µ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', !!viewport);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    const screenWidth = window.innerWidth;
    const isMobileWidth = screenWidth <= 768;
    this.logTest('–ú–æ–±–∏–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞', isMobileWidth);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º touch —Å–æ–±—ã—Ç–∏—è
    const hasTouchSupport = 'ontouchstart' in window;
    this.logTest('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ touch —Å–æ–±—ã—Ç–∏–π', hasTouchSupport);
    
    console.log(`üìê –®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞: ${screenWidth}px`);
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  testPerformance() {
    console.log('\n‚ö° –¢–ï–°–¢: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    console.log('===========================');
    
    const performance = window.performance;
    if (performance) {
      const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
      const domReady = performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;
      
      this.logTest('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ < 5 —Å–µ–∫', loadTime < 5000);
      this.logTest('DOM –≥–æ—Ç–æ–≤ < 3 —Å–µ–∫', domReady < 3000);
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}ms`);
      console.log(`‚è±Ô∏è DOM –≥–æ—Ç–æ–≤: ${domReady}ms`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const domElementsCount = document.querySelectorAll('*').length;
    this.logTest('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—É–º–Ω–æ–µ', domElementsCount < 1000);
    console.log(`üèóÔ∏è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${domElementsCount}`);
  }

  // –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  testSecurity() {
    console.log('\nüîí –¢–ï–°–¢: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');
    console.log('======================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
    const isHttps = window.location.protocol === 'https:';
    const isLocalhost = window.location.hostname === 'localhost';
    this.logTest('HTTPS –∏–ª–∏ localhost', isHttps || isLocalhost);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSP –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const metaCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    this.logTest('CSP –Ω–∞—Å—Ç—Ä–æ–µ–Ω', !!metaCSP);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const hasConsoleErrors = console.error.toString().includes('native');
    this.logTest('–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏', !hasConsoleErrors);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  logTest(description, passed, details = '') {
    const result = passed ? '‚úÖ' : '‚ùå';
    console.log(`${result} ${description} ${details}`);
    this.testResults.push({ description, passed, details });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('================================');
    
    const totalTests = this.testResults.length;
    const passedTests = this.testResults.filter(t => t.passed).length;
    const successRate = Math.round((passedTests / totalTests) * 100);
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
    
    if (successRate >= 90) {
      console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
    } else if (successRate >= 70) {
      console.log('‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    } else {
      console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
    const failedTests = this.testResults.filter(t => !t.passed);
    if (failedTests.length > 0) {
      console.log('\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      failedTests.forEach(test => {
        console.log(`   ‚Ä¢ ${test.description}`);
      });
    }
    
    return { totalTests, passedTests, successRate, failedTests };
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
    
    await this.testTelegramAuth();
    this.testEnvironments();
    this.testUIElements();
    await this.testAllAPIs();
    await this.testGamificationFeatures();
    this.testMobileAdaptation();
    this.testPerformance();
    this.testSecurity();
    
    return this.generateReport();
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Road Map —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
function testRoadMapFeatures() {
  console.log('\nüó∫Ô∏è –¢–ï–°–¢: Road Map —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
  console.log('===================================');
  
  // –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const mockUser = {
    id: 'test-user-123',
    telegram_id: '638358977',
    first_name: 'Test User'
  };
  
  const mockMetrics = {
    startAssessment: {
      memory: 5,
      sleep: 4,
      energy: 6,
      stress: 7
    },
    weeklyProgress: [
      {
        week: 1,
        metrics: { memory: 6, sleep: 5, energy: 6, stress: 6 },
        achievements: ['–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å', '–ù–µ–¥–µ–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏']
      },
      {
        week: 2,  
        metrics: { memory: 7, sleep: 6, energy: 7, stress: 5 },
        achievements: ['7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', '–ü–µ—Ä–≤—ã–µ —Ä–æ—Å—Ç–∫–∏']
      }
    ]
  };
  
  console.log('üìä Mock –¥–∞–Ω–Ω—ã–µ Road Map —Å–æ–∑–¥–∞–Ω—ã');
  console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', mockUser);
  console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º:', mockMetrics.weeklyProgress.length);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π
  const calculateImprovement = (start, current) => {
    return ((current - start) / start) * 100;
  };
  
  const memoryImprovement = calculateImprovement(
    mockMetrics.startAssessment.memory,
    mockMetrics.weeklyProgress[1].metrics.memory
  );
  
  console.log(`üß† –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +${memoryImprovement.toFixed(0)}%`);
  console.log('‚úÖ Road Map —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  
  return mockMetrics;
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
const tester = new SporesAppTester();

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
(async () => {
  const results = await tester.runAllTests();
  const roadMapData = testRoadMapFeatures();
  
  console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('==================');
  console.log('1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Road Map –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');  
  console.log('3. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫');
  console.log('4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ');
  console.log('5. –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
  window.testResults = results;
  window.roadMapMockData = roadMapData;
  window.tester = tester;
})();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testTelegramAuth = () => tester.testTelegramAuth();
window.testRoadMap = testRoadMapFeatures;
window.generateMockProgress = () => {
  const weeks = 12;
  const progress = [];
  for (let i = 1; i <= weeks; i++) {
    progress.push({
      week: i,
      date: new Date(Date.now() - (weeks - i) * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      metrics: {
        memory: Math.min(10, 4 + i * 0.3 + Math.random() * 0.5),
        sleep: Math.min(10, 3 + i * 0.4 + Math.random() * 0.5),
        energy: Math.min(10, 4 + i * 0.25 + Math.random() * 0.5),
        stress: Math.max(1, 8 - i * 0.3 + Math.random() * 0.5)
      },
      achievements: i % 4 === 0 ? [`–ù–µ–¥–µ–ª—è ${i}`, 'Milestone'] : [`–ù–µ–¥–µ–ª—è ${i}`],
      extraHabits: Math.floor(Math.random() * 30) + 10
    });
  }
  return progress;
};

console.log('\nüí° –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('- testTelegramAuth() - —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
console.log('- testRoadMap() - —Ç–µ—Å—Ç Road Map');
console.log('- generateMockProgress() - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
console.log('- tester.runAllTests() - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'); 