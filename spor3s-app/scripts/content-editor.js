#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ VPS
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
const CONTENT_TYPES = {
  '1': { name: 'ai_prompts', description: 'AI –ø—Ä–æ–º–ø—Ç—ã' },
  '2': { name: 'reminder_scenarios', description: '–°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' },
  '3': { name: 'gamification_rules', description: '–ü—Ä–∞–≤–∏–ª–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
  '4': { name: 'dialog_scenarios', description: '–î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏' },
  '5': { name: 'system_settings', description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' }
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function getContentList(type) {
  const url = `${API_BASE_URL}/api/content-management?type=${type}`;
  const result = await makeRequest(url);
  
  if (!result || !result.data) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    return [];
  }
  
  return result.data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function getContent(type, name) {
  const url = `${API_BASE_URL}/api/content-management?type=${type}&name=${encodeURIComponent(name)}`;
  const result = await makeRequest(url);
  
  if (!result || !result.data || result.data.length === 0) {
    console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
  
  return result.data[0];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function updateContent(type, name, content, description = '') {
  const url = `${API_BASE_URL}/api/content-management`;
  const result = await makeRequest(url, {
    method: 'POST',
    body: JSON.stringify({
      type,
      name,
      content,
      description,
      isActive: true
    })
  });
  
  if (result && result.success) {
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    return true;
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function createContent(type, name, content, description = '') {
  const url = `${API_BASE_URL}/api/content-management`;
  const result = await makeRequest(url, {
    method: 'POST',
    body: JSON.stringify({
      type,
      name,
      content,
      description,
      isActive: true
    })
  });
  
  if (result && result.success) {
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    return true;
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu() {
  console.log('\nüéØ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–û–ú SPOR3S');
  console.log('=====================================');
  console.log('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  Object.entries(CONTENT_TYPES).forEach(([key, value]) => {
    console.log(`${key}. ${value.description}`);
  });
  console.log('0. –í—ã—Ö–æ–¥');
  
  const choice = await ask('\n–í–∞—à –≤—ã–±–æ—Ä: ');
  
  if (choice === '0') {
    console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
    rl.close();
    return;
  }
  
  const contentType = CONTENT_TYPES[choice];
  if (!contentType) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
    await showMainMenu();
    return;
  }
  
  await showContentMenu(contentType.name);
}

// –ú–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function showContentMenu(type) {
  console.log(`\nüìù –£–ü–†–ê–í–õ–ï–ù–ò–ï: ${CONTENT_TYPES[Object.keys(CONTENT_TYPES).find(k => CONTENT_TYPES[k].name === type)].description}`);
  console.log('=====================================');
  
  const contentList = await getContentList(type);
  
  if (contentList.length === 0) {
    console.log('üì≠ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  } else {
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:');
    contentList.forEach((item, index) => {
      console.log(`${index + 1}. ${item.name}${item.description ? ` - ${item.description}` : ''}`);
    });
  }
  
  console.log('\n–î–µ–π—Å—Ç–≤–∏—è:');
  console.log('e. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π');
  console.log('c. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π');
  console.log('b. –ù–∞–∑–∞–¥');
  
  const choice = await ask('\n–í–∞—à –≤—ã–±–æ—Ä: ');
  
  switch (choice.toLowerCase()) {
    case 'e':
      if (contentList.length > 0) {
        await editContent(type, contentList);
      } else {
        console.log('‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        await showContentMenu(type);
      }
      break;
    case 'c':
      await createNewContent(type);
      break;
    case 'b':
      await showMainMenu();
      break;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      await showContentMenu(type);
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function editContent(type, contentList) {
  console.log('\nüìù –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê');
  console.log('=====================================');
  
  contentList.forEach((item, index) => {
    console.log(`${index + 1}. ${item.name}`);
  });
  
  const choice = await ask('\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–æ–º–µ—Ä): ');
  const index = parseInt(choice) - 1;
  
  if (index < 0 || index >= contentList.length) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
    await editContent(type, contentList);
    return;
  }
  
  const selectedContent = contentList[index];
  console.log(`\nüìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${selectedContent.name}`);
  console.log('=====================================');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  console.log('–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:');
  console.log('‚îÄ'.repeat(50));
  console.log(selectedContent.content);
  console.log('‚îÄ'.repeat(50));
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  console.log('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):');
  const newContent = await ask('–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ');
  
  if (newContent.trim()) {
    const success = await updateContent(type, selectedContent.name, newContent, selectedContent.description);
    if (success) {
      console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.');
    }
  } else {
    console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  await showContentMenu(type);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function createNewContent(type) {
  console.log('\n‚ûï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê');
  console.log('=====================================');
  
  const name = await ask('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ');
  if (!name.trim()) {
    console.log('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    await showContentMenu(type);
    return;
  }
  
  const description = await ask('–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ');
  
  console.log('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç (Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):');
  const content = await ask('–ö–æ–Ω—Ç–µ–Ω—Ç: ');
  
  if (!content.trim()) {
    console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    await showContentMenu(type);
    return;
  }
  
  const success = await createContent(type, name, content, description);
  if (success) {
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω! –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.');
  }
  
  await showContentMenu(type);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
  const testResult = await makeRequest(`${API_BASE_URL}/api/content-management?type=ai_prompts`);
  if (!testResult) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞', API_BASE_URL);
    console.log('2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }
  
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ');
  await showMainMenu();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  makeRequest,
  getContentList,
  getContent,
  updateContent,
  createContent
};
