"use client";

import { useState } from 'react';

interface TelegramBotLinkProps {
  userId: string;
  onSuccess?: () => void;
}

export default function TelegramBotLink({ userId, onSuccess }: TelegramBotLinkProps) {
  const [authCode, setAuthCode] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');

  const generateAuthCode = async () => {
    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await fetch('/api/generate-auth-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_id: userId })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞');
      }

      const data = await response.json();
      setAuthCode(data.auth_code);
      setSuccess(data.message);
      
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(`/start ${authCode}`);
      setSuccess('–ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (error) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É');
    }
  };

  return (
    <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20">
      <h3 className="text-xl font-semibold text-white mb-4">
        üîó –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –±–æ—Ç–∞
      </h3>
      
      <p className="text-gray-300 mb-4">
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —á–∞—Ç —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º –º–µ–∂–¥—É Mini App –∏ Telegram –±–æ—Ç–æ–º @spor3z
      </p>

      {!authCode ? (
        <button
          onClick={generateAuthCode}
          disabled={isLoading}
          className="w-full bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥...' : 'üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏'}
        </button>
      ) : (
        <div className="space-y-4">
          <div className="bg-gray-800 rounded-lg p-4">
            <p className="text-sm text-gray-400 mb-2">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É @spor3z:</p>
            <div className="bg-gray-900 rounded p-3 font-mono text-green-400 break-all">
              /start {authCode}
            </div>
          </div>
          
          <div className="flex gap-2">
            <button
              onClick={copyToClipboard}
              className="flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
            >
              üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button
              onClick={() => setAuthCode('')}
              className="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
            >
              üîÑ –ù–æ–≤—ã–π –∫–æ–¥
            </button>
          </div>
        </div>
      )}

      {error && (
        <div className="mt-4 p-3 bg-red-500/20 border border-red-500/30 rounded-lg">
          <p className="text-red-400 text-sm">{error}</p>
        </div>
      )}

      {success && (
        <div className="mt-4 p-3 bg-green-500/20 border border-green-500/30 rounded-lg">
          <p className="text-green-400 text-sm">{success}</p>
        </div>
      )}

      <div className="mt-4 text-xs text-gray-400">
        <p>üí° –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:</p>
        <ul className="list-disc list-inside mt-2 space-y-1">
          <li>–û–±—â–∞—Ç—å—Å—è —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º –≤ Telegram</li>
          <li>–û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞</li>
          <li>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π</li>
          <li>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</li>
        </ul>
      </div>
    </div>
  );
}