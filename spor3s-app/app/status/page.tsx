"use client";
import { useState, useEffect } from "react";

export default function StatusPage() {
  const [status, setStatus] = useState({
    app: '–∑–∞–≥—Ä—É–∑–∫–∞...',
    supabase: '–∑–∞–≥—Ä—É–∑–∫–∞...',
    ai: '–∑–∞–≥—Ä—É–∑–∫–∞...',
    auth: '–∑–∞–≥—Ä—É–∑–∫–∞...'
  });

  useEffect(() => {
    checkStatus();
  }, []);

  const checkStatus = async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setStatus(prev => ({ ...prev, app: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' }));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    try {
      const response = await fetch('/api/init-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegram_id: 'status-check' })
      });
      
      if (response.ok) {
        setStatus(prev => ({ ...prev, supabase: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' }));
      } else {
        setStatus(prev => ({ ...prev, supabase: '‚ùå –û—à–∏–±–∫–∞' }));
      }
    } catch (error) {
      setStatus(prev => ({ ...prev, supabase: '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ' }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ AI API
    try {
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [{ role: 'user', content: '—Ç–µ—Å—Ç' }],
          user_id: null
        })
      });
      
      if (response.ok) {
        setStatus(prev => ({ ...prev, ai: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' }));
      } else {
        setStatus(prev => ({ ...prev, ai: '‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º' }));
      }
    } catch (error) {
      setStatus(prev => ({ ...prev, ai: '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ' }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try {
      const userId = localStorage.getItem('user_id');
      if (userId) {
        setStatus(prev => ({ ...prev, auth: '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }));
      } else {
        setStatus(prev => ({ ...prev, auth: '‚ö™ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }));
      }
    } catch (error) {
      setStatus(prev => ({ ...prev, auth: '‚ùå –û—à–∏–±–∫–∞' }));
    }
  };

  return (
    <div style={{ 
      padding: '20px', 
      fontFamily: 'Arial, sans-serif',
      maxWidth: '600px',
      margin: '0 auto'
    }}>
      <h1 style={{ color: '#fff', textAlign: 'center' }}>üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h1>
      
      <div style={{
        background: 'rgba(255, 255, 255, 0.1)',
        borderRadius: '12px',
        padding: '20px',
        marginBottom: '20px'
      }}>
        <h2 style={{ color: '#fff', marginTop: 0 }}>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:</h2>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between',
            padding: '10px',
            background: 'rgba(255, 255, 255, 0.05)',
            borderRadius: '8px'
          }}>
            <span style={{ color: '#ccc' }}>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Next.js:</span>
            <span>{status.app}</span>
          </div>
          
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between',
            padding: '10px',
            background: 'rgba(255, 255, 255, 0.05)',
            borderRadius: '8px'
          }}>
            <span style={{ color: '#ccc' }}>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase:</span>
            <span>{status.supabase}</span>
          </div>
          
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between',
            padding: '10px',
            background: 'rgba(255, 255, 255, 0.05)',
            borderRadius: '8px'
          }}>
            <span style={{ color: '#ccc' }}>AI —á–∞—Ç:</span>
            <span>{status.ai}</span>
          </div>
          
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between',
            padding: '10px',
            background: 'rgba(255, 255, 255, 0.05)',
            borderRadius: '8px'
          }}>
            <span style={{ color: '#ccc' }}>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</span>
            <span>{status.auth}</span>
          </div>
        </div>
      </div>

      <div style={{
        background: 'rgba(255, 255, 255, 0.1)',
        borderRadius: '12px',
        padding: '20px',
        marginBottom: '20px'
      }}>
        <h2 style={{ color: '#fff', marginTop: 0 }}>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</h2>
        <ul style={{ color: '#ccc' }}>
          <li>‚úÖ –§–æ–Ω: –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ –¥–≤–∏–∂–µ–Ω–∏—è</li>
          <li>‚úÖ AI: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –õ–ò–ë–û –∫–∞–ø—Å—É–ª—ã –õ–ò–ë–û –ø–æ—Ä–æ—à–æ–∫</li>
          <li>‚úÖ –ö–æ—Ä–∑–∏–Ω–∞: —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ = 0</li>
          <li>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: Telegram login –ø—Ä–∏ –∑–∞–∫–∞–∑–µ</li>
          <li>‚úÖ Cross-origin: –Ω–∞—Å—Ç—Ä–æ–µ–Ω allowedDevOrigins</li>
          <li>‚úÖ Runtime: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        </ul>
      </div>

      <div style={{ textAlign: 'center' }}>
        <button 
          onClick={checkStatus}
          style={{
            padding: '12px 24px',
            background: '#ff00cc',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '16px',
            marginRight: '10px'
          }}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        </button>
        
        <a 
          href="/"
          style={{
            display: 'inline-block',
            padding: '12px 24px',
            background: '#3333ff',
            color: 'white',
            textDecoration: 'none',
            borderRadius: '8px',
            fontSize: '16px'
          }}
        >
          üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </a>
      </div>
    </div>
  );
} 