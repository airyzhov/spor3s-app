import { NextRequest, NextResponse } from "next/server";
import { supabaseServer } from "../../supabaseServerClient";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const {
      user_id,
      items,
      total,
      address,
      fio,
      phone,
      referral_code,
      comment,
      coins_to_use = 0
    } = body;

    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', { user_id, total, fio, phone });

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —É—Ä–æ–≤–Ω–µ
    let userLevel = null;
    let scBalance = 0;
    
    if (user_id) {
      const { data: levelData, error: levelError } = await supabaseServer
        .from("user_levels")
        .select("*")
        .eq("user_id", user_id)
        .single();

      if (!levelError && levelData) {
        userLevel = levelData;
        scBalance = levelData.current_sc_balance || 0;
      }
    }

    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
    let levelDiscount = 0;
    let levelDiscountPercent = 0;
    
    if (userLevel) {
      const levelCode = userLevel.level_code || 'novice';
      const totalAmount = total || 0;
      
      // –°–∫–∏–¥–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
      if (levelCode === 'master' && totalAmount >= 10000) { // –ú–∞—Å—Ç–µ—Ä
        levelDiscountPercent = 5;
        levelDiscount = Math.floor(totalAmount * 0.05);
      } else if (levelCode === 'legend' && totalAmount >= 20000) { // –õ–µ–≥–µ–Ω–¥–∞
        levelDiscountPercent = 10;
        levelDiscount = Math.floor(totalAmount * 0.10);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º SC —Å–∫–∏–¥–∫—É
    let scDiscount = 0;
    let coinsToApply = Math.min(coins_to_use, scBalance);
    
    if (coinsToApply > 0) {
      const maxScDiscount = Math.floor(total * 0.30); // –ú–∞–∫—Å–∏–º—É–º 30% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
      scDiscount = Math.min(coinsToApply, maxScDiscount);
      coinsToApply = scDiscount; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    }

    // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    const totalDiscount = levelDiscount + scDiscount;
    const finalTotal = Math.max(0, total - totalDiscount);

    // 5. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const { data, error } = await supabaseServer.from("orders").insert([
      {
        user_id,
        items,
        total: finalTotal,
        address,
        fio,
        phone,
        referral_code,
        comment,
        status: "pending",
        created_at: new Date().toISOString(),
        spores_coin: coinsToApply,
        tracking_number: null,
        start_date: null,
        coins_spent: coinsToApply
      },
    ]).select();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    
    const order = data?.[0];
    if (!order) {
      console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω - data –ø—É—Å—Ç–æ–π');
      return NextResponse.json({ error: "Failed to create order" }, { status: 500 });
    }

    // 6. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–æ–Ω–µ—Ç—ã ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è
    if (coinsToApply > 0) {
      console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ SC: ${coinsToApply}`);
      
      const { error: scError } = await supabaseServer
        .from("sc_transactions")
        .insert([{
          user_id: user_id,
          amount: -coinsToApply, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
          transaction_type: "spent",
          source_type: "order_discount",
          description: `–°–ø–∏—Å–∞–Ω–∏–µ SC –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}`,
          created_at: new Date().toISOString()
        }]);

      if (scError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è SC:', scError);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = scBalance - coinsToApply;
        const { error: updateError } = await supabaseServer
          .from("user_levels")
          .update({ 
            current_sc_balance: newBalance,
            total_sc_spent: (userLevel?.total_sc_spent || 0) + coinsToApply
          })
          .eq("user_id", user_id);

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SC:', updateError);
        }
      }
    }

    // 7. –ù–∞—á–∏—Å–ª—è–µ–º SC –∑–∞ –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å user_id)
    if (user_id) {
      const scEarned = Math.floor(finalTotal / 100); // 1 SC –∑–∞ –∫–∞–∂–¥—ã–µ 100 —Ä—É–±–ª–µ–π
      
      if (scEarned > 0) {
        const { error: earnError } = await supabaseServer
          .from("sc_transactions")
          .insert([{
            user_id: user_id,
            amount: scEarned,
            transaction_type: "earned",
            source_type: "order",
            description: `–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ SC –∑–∞ –∑–∞–∫–∞–∑ #${order.id}`,
            created_at: new Date().toISOString()
          }]);

        if (earnError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è SC:', earnError);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const currentBalance = scBalance - coinsToApply; // –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
          const newBalance = currentBalance + scEarned;
          const { error: updateError } = await supabaseServer
            .from("user_levels")
            .update({ 
              current_sc_balance: newBalance,
              total_sc_earned: (userLevel?.total_sc_earned || 0) + scEarned
            })
            .eq("user_id", user_id);

          if (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SC:', updateError);
          }
        }
      }
    }

    // 8. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –≤ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user_id) {
      const { data: existingOrders, error: ordersError } = await supabaseServer
        .from("orders")
        .select("total")
        .eq("user_id", user_id);

      if (!ordersError) {
        const totalOrdersAmount = existingOrders?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;
        const ordersCount = existingOrders?.length || 0;

        const { error: updateLevelError } = await supabaseServer
          .from("user_levels")
          .update({
            total_orders_amount: totalOrdersAmount,
            orders_count: ordersCount,
            updated_at: new Date().toISOString()
          })
          .eq("user_id", user_id);

        if (updateLevelError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", updateLevelError);
        }
      }
    }

    // 9. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å referral_code, user_id –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑)
    if (referral_code && user_id) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑—ã —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: existingOrders, error: ordersError } = await supabaseServer
          .from("orders")
          .select("id")
          .eq("user_id", user_id)
          .neq("id", order.id); // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑

        if (!ordersError && (!existingOrders || existingOrders.length === 0)) {
          // –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
          console.log('[order] First order with referral_code, awarding bonus');
          
          const { error: bonusError } = await supabaseServer
            .from("sc_transactions")
            .insert([{
              user_id: user_id,
              amount: 50, // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 50 SC
              transaction_type: "earned",
              source_type: "referral",
              description: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–¥: ${referral_code}`,
              created_at: new Date().toISOString()
            }]);

          if (bonusError) {
            console.log('[order] Failed to award referral bonus:', bonusError);
          } else {
            console.log('[order] Referral bonus awarded successfully');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentBalance = scBalance - coinsToApply;
            const newBalance = currentBalance + 50;
            const { error: updateError } = await supabaseServer
              .from("user_levels")
              .update({ 
                current_sc_balance: newBalance,
                total_sc_earned: (userLevel?.total_sc_earned || 0) + 50
              })
              .eq("user_id", user_id);

            if (updateError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SC:', updateError);
            }
          }
        }
      } catch (bonusError) {
        console.error('[order] Error awarding referral bonus:', bonusError);
      }
    }

    // 10. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try {
      console.log(`üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó: #${order.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user_id} | –°—É–º–º–∞: ${finalTotal} —Ä—É–±`);
      console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${JSON.stringify(items)}`);
      console.log(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${fio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`üìç –ê–¥—Ä–µ—Å: ${address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`üí∞ –°–∫–∏–¥–∫–∏: –£—Ä–æ–≤–µ–Ω—å ${levelDiscount}‚ÇΩ, SC ${scDiscount}‚ÇΩ, –ò—Ç–æ–≥–æ ${totalDiscount}‚ÇΩ`);
    } catch (notificationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', notificationError);
    }

    return NextResponse.json({ 
      success: true, 
      order,
      appliedDiscounts: {
        levelDiscount,
        levelDiscountPercent,
        scDiscount: coinsToApply,
        totalDiscount,
        finalTotal
      }
    });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API –∑–∞–∫–∞–∑–æ–≤:', e);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞" }, { status: 500 });
  }
} 