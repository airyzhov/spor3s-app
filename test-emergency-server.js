// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç emergency server
const http = require('http');

async function testEmergencyServer() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É—é Emergency Server...');
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ localhost:3000...');
    
    const postData = JSON.stringify({
        message: '—Ö–æ—á—É –µ–∂–æ–≤–∏–∫ –Ω–∞ –º–µ—Å—è—Ü',
        user_id: 'test-user',
        telegram_id: '123456'
    });

    const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/test-api',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);

            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    console.log('üì® –û—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
                    resolve(response);
                } catch (error) {
                    console.log('üì® Raw –æ—Ç–≤–µ—Ç:', data);
                    resolve(data);
                }
            });
        });

        req.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            reject(error);
        });

        req.write(postData);
        req.end();
    });
}

testEmergencyServer()
    .then(() => console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'))
    .catch(err => console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', err.message));
