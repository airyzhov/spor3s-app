{
  "name": "Web3Grow Telegram Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Telegram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text }}",
              "operation": "exists"
            }
          ]
        }
      },
      "id": "message-filter",
      "name": "Filter Messages",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendChatAction",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}"
            },
            {
              "name": "action",
              "value": "typing"
            }
          ]
        }
      },
      "id": "typing-indicator",
      "name": "Show Typing",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "url": "{{ $env.NEXT_PUBLIC_BASE_URL }}/api/ai",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "telegram_id",
              "value": "={{ $json.message.from.id }}"
            },
            {
              "name": "context",
              "value": "={{ $('Get User Context').item.json.context }}"
            }
          ]
        }
      },
      "id": "ai-api",
      "name": "Call AI API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}"
            },
            {
              "name": "text",
              "value": "={{ $('Call AI API').item.json.response }}"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $('Get User').item.json.id }}"
            },
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "source",
              "value": "web3grow"
            }
          ]
        }
      },
      "id": "save-user-message",
      "name": "Save User Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $('Get User').item.json.id }}"
            },
            {
              "name": "role",
              "value": "assistant"
            },
            {
              "name": "content",
              "value": "={{ $('Call AI API').item.json.response }}"
            },
            {
              "name": "source",
              "value": "web3grow"
            }
          ]
        }
      },
      "id": "save-ai-response",
      "name": "Save AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/users",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "telegram_id",
              "value": "eq.{{ $json.message.from.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            }
          ]
        }
      },
      "id": "get-user",
      "name": "Get User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [460, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "user-exists",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "user-exists-check",
      "name": "User Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/users",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "telegram_id",
              "value": "={{ $json.message.from.id }}"
            }
          ]
        }
      },
      "id": "create-user",
      "name": "Create User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/messages",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "eq.{{ $('Get User').item.json[0].id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            }
          ]
        }
      },
      "id": "get-user-context",
      "name": "Get User Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [460, 500]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text.toLowerCase() }}",
              "value2": "заказ",
              "operation": "contains"
            },
            {
              "value1": "={{ $json.message.text.toLowerCase() }}",
              "value2": "купить",
              "operation": "contains"
            },
            {
              "value1": "={{ $json.message.text.toLowerCase() }}",
              "value2": "оформить",
              "operation": "contains"
            }
          ],
          "combinator": "or"
        }
      },
      "id": "order-check",
      "name": "Order Intent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/orders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $('Get User').item.json[0].id }}"
            },
            {
              "name": "status",
              "value": "pending"
            },
            {
              "name": "total_amount",
              "value": "={{ $('Parse Order').item.json.total }}"
            },
            {
              "name": "items",
              "value": "={{ $('Parse Order').item.json.items }}"
            }
          ]
        }
      },
      "id": "create-order",
      "name": "Create Order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}"
            },
            {
              "name": "text",
              "value": "🎉 Заказ создан! Для оформления перейдите в Mini App:\n\n{{ $env.NEXT_PUBLIC_BASE_URL }}/order/{{ $('Create Order').item.json[0].id }}"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        }
      },
      "id": "send-order-link",
      "name": "Send Order Link",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Парсинг данных заказа из сообщения\nconst message = $input.first().json.message.text.toLowerCase();\nconst aiResponse = $('Call AI API').item.json.response.toLowerCase();\n\nconst products = {\n  'ежовик': { name: 'Ежовик', price: 1500 },\n  'мухомор': { name: 'Мухомор', price: 1200 },\n  'кордицепс': { name: 'Кордицепс', price: 1800 },\n  'курс': { name: 'Курс 4 в 1', price: 4500 }\n};\n\nconst foundProducts = [];\nlet total = 0;\n\nObject.entries(products).forEach(([keyword, product]) => {\n  if (message.includes(keyword) || aiResponse.includes(keyword)) {\n    foundProducts.push(product);\n    total += product.price;\n  }\n});\n\nreturn {\n  items: foundProducts,\n  total: total\n};"
      },
      "id": "parse-order",
      "name": "Parse Order",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    }
  ],
  "connections": {
    "Telegram Webhook": {
      "main": [
        [
          {
            "node": "Filter Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Messages": {
      "main": [
        [
          {
            "node": "Show Typing",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Show Typing": {
      "main": [
        [
          {
            "node": "Call AI API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "User Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Exists?": {
      "main": [
        [
          {
            "node": "Get User Context",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "main": [
        [
          {
            "node": "Create User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Context": {
      "main": [
        [
          {
            "node": "Call AI API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call AI API": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save User Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Order Intent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Response": {
      "main": [
        [
          {
            "node": "Save AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Intent?": {
      "main": [
        [
          {
            "node": "Parse Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Order": {
      "main": [
        [
          {
            "node": "Create Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Order": {
      "main": [
        [
          {
            "node": "Send Order Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 