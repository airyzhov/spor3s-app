-- üéØ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô –ò SC –î–õ–Ø SPOR3S-APP
-- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏

-- 1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE user_levels (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  
  -- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  current_level VARCHAR(50) DEFAULT 'üå± –ù–æ–≤–∏—á–æ–∫',
  level_code VARCHAR(20) DEFAULT 'novice',
  
  -- SC –±–∞–ª–∞–Ω—Å
  total_sc_earned INTEGER DEFAULT 0,
  total_sc_spent INTEGER DEFAULT 0,
  current_sc_balance INTEGER DEFAULT 0,
  
  -- –£—Å–ª–æ–≤–∏—è —É—Ä–æ–≤–Ω–µ–π
  total_orders_amount DECIMAL(10, 2) DEFAULT 0,
  orders_count INTEGER DEFAULT 0,
  
  -- –°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç—É–ø–∞
  has_motivational_habit BOOLEAN DEFAULT FALSE,
  has_expert_chat_access BOOLEAN DEFAULT FALSE,
  has_permanent_discount BOOLEAN DEFAULT FALSE,
  has_vip_access BOOLEAN DEFAULT FALSE,
  
  -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  level_achieved_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(user_id)
);

-- 2. –ò—Å—Ç–æ—Ä–∏—è SC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
CREATE TABLE sc_transactions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  amount INTEGER NOT NULL,
  transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('earned', 'spent', 'gifted', 'received')),
  source_type VARCHAR(50), -- checkin, survey, habit, order, referral, gift
  source_id UUID, -- ID –∑–∞–∫–∞–∑–∞, —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —Ç.–¥.
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
CREATE TABLE daily_activities (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  
  -- –û—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  daily_checkin BOOLEAN DEFAULT FALSE,
  weekly_survey BOOLEAN DEFAULT FALSE,
  motivational_habit BOOLEAN DEFAULT FALSE,
  
  -- SC –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  sc_earned INTEGER DEFAULT 0,
  
  -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(user_id, date)
);

-- 4. –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ SC
CREATE TABLE sc_gifts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  sender_id UUID REFERENCES users(id) ON DELETE CASCADE,
  receiver_id UUID REFERENCES users(id) ON DELETE CASCADE,
  amount INTEGER NOT NULL,
  message TEXT,
  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined', 'expired')),
  expires_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
CREATE TABLE level_config (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  level_code VARCHAR(20) UNIQUE NOT NULL,
  level_name VARCHAR(50) NOT NULL,
  level_icon VARCHAR(10) NOT NULL,
  sc_required INTEGER NOT NULL,
  orders_amount_required DECIMAL(10, 2) DEFAULT 0,
  orders_count_required INTEGER DEFAULT 0,
  
  -- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è
  benefits JSONB,
  
  -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–ù–î–ï–ö–°–´
CREATE INDEX idx_user_levels_user ON user_levels(user_id);
CREATE INDEX idx_sc_transactions_user ON sc_transactions(user_id, created_at);
CREATE INDEX idx_daily_activities_user_date ON daily_activities(user_id, date);
CREATE INDEX idx_sc_gifts_sender ON sc_gifts(sender_id);
CREATE INDEX idx_sc_gifts_receiver ON sc_gifts(receiver_id);

-- –í–°–¢–ê–í–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –£–†–û–í–ù–ï–ô
INSERT INTO level_config (level_code, level_name, level_icon, sc_required, orders_amount_required, orders_count_required, benefits) VALUES
('novice', 'üå± –ù–æ–≤–∏—á–æ–∫', 'üå±', 0, 0, 0, '{"basic_access": true}'),
('mushroom_picker', 'üçÑ –ì—Ä–∏–±–Ω–∏–∫', 'üçÑ', 20, 0, 0, '{"basic_access": true}'),
('collector', 'üåø –°–æ–±–∏—Ä–∞—Ç–µ–ª—å', 'üåø', 100, 0, 1, '{"motivational_habit": true, "basic_access": true}'),
('expert', 'üå≥ –≠–∫—Å–ø–µ—Ä—Ç', 'üå≥', 300, 5000, 0, '{"expert_chat": true, "raffles": true, "basic_access": true}'),
('master', 'üëë –ú–∞—Å—Ç–µ—Ä', 'üëë', 600, 10000, 0, '{"permanent_discount": 5, "practice_kits": true, "basic_access": true}'),
('legend', 'üåü –õ–µ–≥–µ–Ω–¥–∞', 'üåü', 1200, 20000, 0, '{"permanent_discount": 10, "merch": true, "personal_meetings": true, "live_tracking": true, "basic_access": true}'),
('myth', 'üåÄ –ú–∏—Ñ', 'üåÄ', 2000, 30000, 0, '{"product_testing": true, "nft_rank": true, "gifts": true, "eternal_vip": true, "basic_access": true}');

-- –§–£–ù–ö–¶–ò–ò –ò –¢–†–ò–ì–ì–ï–†–´

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE FUNCTION update_user_level()
RETURNS TRIGGER AS $$
DECLARE
  new_level_code VARCHAR(20);
  new_level_name VARCHAR(50);
  new_level_icon VARCHAR(10);
  level_benefits JSONB;
BEGIN
  -- –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  SELECT lc.level_code, lc.level_name, lc.level_icon, lc.benefits
  INTO new_level_code, new_level_name, new_level_icon, level_benefits
  FROM level_config lc
  WHERE lc.sc_required <= NEW.current_sc_balance
    AND lc.orders_amount_required <= NEW.total_orders_amount
    AND lc.orders_count_required <= NEW.orders_count
  ORDER BY lc.sc_required DESC, lc.orders_amount_required DESC, lc.orders_count_required DESC
  LIMIT 1;
  
  -- –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
  IF NEW.level_code != new_level_code THEN
    NEW.current_level := new_level_name;
    NEW.level_code := new_level_code;
    NEW.level_achieved_at := NOW();
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç—É–ø–∞
    NEW.has_motivational_habit := (level_benefits->>'motivational_habit')::BOOLEAN;
    NEW.has_expert_chat_access := (level_benefits->>'expert_chat')::BOOLEAN;
    NEW.has_permanent_discount := (level_benefits->>'permanent_discount') IS NOT NULL;
    NEW.has_vip_access := (level_benefits->>'eternal_vip')::BOOLEAN;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
CREATE TRIGGER trigger_update_user_level
  BEFORE UPDATE ON user_levels
  FOR EACH ROW
  EXECUTE FUNCTION update_user_level();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è SC –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
CREATE OR REPLACE FUNCTION award_sc_for_activity()
RETURNS TRIGGER AS $$
DECLARE
  sc_amount INTEGER := 0;
  activity_type VARCHAR(50);
BEGIN
  -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SC
  IF NEW.daily_checkin THEN
    sc_amount := 3;
    activity_type := 'checkin';
  ELSIF NEW.weekly_survey THEN
    sc_amount := 25;
    activity_type := 'survey';
  ELSIF NEW.motivational_habit THEN
    sc_amount := 25;
    activity_type := 'habit';
  END IF;
  
  -- –ï—Å–ª–∏ –µ—Å—Ç—å SC –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  IF sc_amount > 0 THEN
    NEW.sc_earned := sc_amount;
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE user_levels 
    SET 
      total_sc_earned = total_sc_earned + sc_amount,
      current_sc_balance = current_sc_balance + sc_amount,
      updated_at = NOW()
    WHERE user_id = NEW.user_id;
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    INSERT INTO sc_transactions (user_id, amount, transaction_type, source_type, description)
    VALUES (NEW.user_id, sc_amount, 'earned', activity_type, 
            CASE 
              WHEN activity_type = 'checkin' THEN '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω'
              WHEN activity_type = 'survey' THEN '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞'
              WHEN activity_type = 'habit' THEN '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞'
            END);
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è SC
CREATE TRIGGER trigger_award_sc
  AFTER INSERT OR UPDATE ON daily_activities
  FOR EACH ROW
  EXECUTE FUNCTION award_sc_for_activity();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ SC
CREATE OR REPLACE FUNCTION process_sc_gift()
RETURNS TRIGGER AS $$
BEGIN
  -- –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç
  IF NEW.status = 'accepted' AND OLD.status != 'accepted' THEN
    -- –°–ø–∏—Å—ã–≤–∞–µ–º SC —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    UPDATE user_levels 
    SET 
      total_sc_spent = total_sc_spent + NEW.amount,
      current_sc_balance = current_sc_balance - NEW.amount,
      updated_at = NOW()
    WHERE user_id = NEW.sender_id;
    
    -- –ù–∞—á–∏—Å–ª—è–µ–º SC –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    UPDATE user_levels 
    SET 
      total_sc_earned = total_sc_earned + NEW.amount,
      current_sc_balance = current_sc_balance + NEW.amount,
      updated_at = NOW()
    WHERE user_id = NEW.receiver_id;
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    INSERT INTO sc_transactions (user_id, amount, transaction_type, source_type, description)
    VALUES 
      (NEW.sender_id, NEW.amount, 'spent', 'gift', '–ü–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É: ' || NEW.message),
      (NEW.receiver_id, NEW.amount, 'earned', 'gift', '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞: ' || NEW.message);
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
CREATE TRIGGER trigger_process_gift
  AFTER UPDATE ON sc_gifts
  FOR EACH ROW
  EXECUTE FUNCTION process_sc_gift();

-- VIEW –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE VIEW user_level_stats AS
SELECT 
  u.id as user_id,
  u.telegram_id,
  u.name,
  ul.current_level,
  ul.level_code,
  ul.current_sc_balance,
  ul.total_sc_earned,
  ul.total_sc_spent,
  ul.total_orders_amount,
  ul.orders_count,
  ul.has_motivational_habit,
  ul.has_expert_chat_access,
  ul.has_permanent_discount,
  ul.has_vip_access,
  ul.level_achieved_at,
  COUNT(da.id) as active_days,
  COUNT(CASE WHEN da.daily_checkin THEN 1 END) as checkin_days,
  COUNT(CASE WHEN da.weekly_survey THEN 1 END) as survey_weeks,
  COUNT(CASE WHEN da.motivational_habit THEN 1 END) as habit_days
FROM users u
LEFT JOIN user_levels ul ON u.id = ul.user_id
LEFT JOIN daily_activities da ON u.id = da.user_id
GROUP BY u.id, ul.current_level, ul.level_code, ul.current_sc_balance, 
         ul.total_sc_earned, ul.total_sc_spent, ul.total_orders_amount, 
         ul.orders_count, ul.has_motivational_habit, ul.has_expert_chat_access,
         ul.has_permanent_discount, ul.has_vip_access, ul.level_achieved_at;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE FUNCTION init_user_level(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
  INSERT INTO user_levels (user_id, current_level, level_code, current_sc_balance)
  VALUES (user_uuid, 'üå± –ù–æ–≤–∏—á–æ–∫', 'novice', 0)
  ON CONFLICT (user_id) DO NOTHING;
END;
$$ LANGUAGE plpgsql;

COMMENT ON TABLE user_levels IS '–£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å';
COMMENT ON TABLE sc_transactions IS '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π SC';
COMMENT ON TABLE daily_activities IS '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
COMMENT ON TABLE sc_gifts IS '–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ SC –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';
COMMENT ON TABLE level_config IS '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –∏ –∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'; 