// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è @web3grow
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { NewMessage } = require('telegram/events');
const { createClient } = require('@supabase/supabase-js');
const axios = require('axios');

console.log('üîç –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è @web3grow');
console.log('=====================================');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
const API_ID = 25152508;
const API_HASH = 'e6d11fbfdac29ec3f8e9f6eb4dc54385';
const SESSION_STRING = '1ApWapzMBu0-7GBPPWHF3xnHLsqVHpPfVfIwyIoX3Y4o147RRCF733k42CMfg8ZPkBXdwLb8cOLDIuetDUHaR39SjN9Ht1RyeU0gzWZiD_p44_2jUgFqGrP8-JySxW9OlZp7jM1oMSUUxUUEe63Ioxp08Dc5P0-fCRIgQlBVSxfePt0fUzBQB22q1O4JtxUNv8vOWeKu3tOb3oU22SUti96ziS4mu5cpWfsROoBAUxGHQMSdz30emwsRglWrdFEGYl1s5LR5AdHQe7Nzs2C9jnaq3rOJpNsYHpEDU325EIw3j-yEADT7I5OuTV_gon57bq_MGFkNQtUVeeOIONhvUHdJlTPvnNyg=';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
const client = new TelegramClient(
  new StringSession(SESSION_STRING),
  API_ID,
  API_HASH,
  { 
    connectionRetries: 5,
    useWSS: false
  }
);

// Supabase –∫–ª–∏–µ–Ω—Ç
const supabase = createClient(
  'https://hwospkbheqaauluoytvz.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh3b3Nwa2JoZXFhYXVsdW95dHZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NjQyMDIsImV4cCI6MjA2NzE0MDIwMn0.vIUqjDmvEtAeJi_sCrntD8rUdEr8EpoMXpbTcDhCJIs'
);

let messageCount = 0;

async function setupEventHandlers() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  client.addEventHandler(async (event) => {
    messageCount++;
    console.log(`üì® –°–æ–±—ã—Ç–∏–µ #${messageCount} –ø–æ–ª—É—á–µ–Ω–æ`);
    
    const message = event.message;
    
    if (!message) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–±—ã—Ç–∏–∏');
      return;
    }
    
    console.log('üìù –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.log('- ID:', message.id);
    console.log('- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', message.senderId);
    console.log('- –ß–∞—Ç:', message.chatId);
    console.log('- –¢–µ–∫—Å—Ç:', message.text);
    console.log('- –¢–∏–ø:', message.className);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
    if (message.senderId?.bot || message.chatId?.channel) {
      console.log('‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞/–∫–∞–Ω–∞–ª');
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const me = await client.getMe();
    if (message.senderId?.toString() === me.id?.toString()) {
      console.log('‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }

    try {
      console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      await handleIncomingMessage(message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }, new NewMessage({}));
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

async function handleIncomingMessage(message) {
  const telegramId = message.senderId?.toString();
  const userMessage = message.text;
  const chatId = message.chatId;

  if (!telegramId || !userMessage) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return;
  }

  console.log(`üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${telegramId}: ${userMessage}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(telegramId);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.id}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await saveMessage(user.id, 'user', userMessage, 'web3grow');
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    console.log('‚å®Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."');
    await client.sendMessage(chatId, { message: '...' });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const context = await getUserContext(user.id);
    console.log(`üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

    // –í—ã–∑—ã–≤–∞–µ–º AI API
    console.log('ü§ñ –í—ã–∑—ã–≤–∞–µ–º AI API...');
    const aiResponse = await callAI(userMessage, context);
    console.log(`ü§ñ AI –æ—Ç–≤–µ—Ç: ${aiResponse}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
    await saveMessage(user.id, 'assistant', aiResponse, 'web3grow');
    console.log('‚úÖ AI –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç...');
    await client.sendMessage(chatId, { message: aiResponse });
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await client.sendMessage(chatId, { 
      message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    });
  }
}

async function getOrCreateUser(telegramId) {
  try {
    console.log(`üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: ${telegramId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingUser, error: selectError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', selectError);
    }

    if (existingUser) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', existingUser.id);
      return existingUser;
    }

    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error: insertError } = await supabase
      .from('users')
      .insert([{ telegram_id: telegramId }])
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertError);
      throw insertError;
    }
    
    console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.id);
    return newUser;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return { id: 'temp-' + telegramId };
  }
}

async function saveMessage(userId, role, content, source) {
  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${role} -> ${source}`);
    
    const { error } = await supabase
      .from('messages')
      .insert([{
        user_id: userId,
        role,
        content,
        source
      }]);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

async function getUserContext(userId) {
  try {
    console.log(`üìö –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const { data: messages, error } = await supabase
      .from('messages')
      .select('role, content')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      return [];
    }

    console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ ${messages?.length || 0} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞`);
    return messages || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
    return [];
  }
}

async function callAI(message, context) {
  try {
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI API...');
    console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message);
    console.log('üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç:', context.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    
    const response = await axios.post('http://localhost:3000/api/ai', {
      message,
      context,
      source: 'web3grow'
    }, {
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    console.log('‚úÖ AI API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
    return response.data.response;
  } catch (error) {
    console.error('‚ùå AI API –æ—à–∏–±–∫–∞:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    }
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

async function start() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å @web3grow...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    await client.start();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    const me = await client.getMe();
    console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
    console.log('ID:', me.id);
    console.log('Username:', me.username);
    console.log('First Name:', me.firstName);
    console.log('Last Name:', me.lastName);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await setupEventHandlers();
    
    console.log('');
    console.log('‚úÖ @web3grow —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞!');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ @web3grow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('üîç –í—Å–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å');
    
    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    process.on('SIGINT', async () => {
      console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
      await client.disconnect();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    console.log('');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ session string');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
start(); 