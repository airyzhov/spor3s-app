const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: 'env.local' });

console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´');
console.log('=====================================');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_ID = process.env.TELEGRAM_API_ID;
const API_HASH = process.env.TELEGRAM_API_HASH;
const SESSION_STRING = process.env.TELEGRAM_SESSION_STRING;
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('API_ID:', API_ID ? '‚úÖ' : '‚ùå');
console.log('API_HASH:', API_HASH ? '‚úÖ' : '‚ùå');
console.log('SESSION_STRING:', SESSION_STRING ? '‚úÖ' : '‚ùå');
console.log('SUPABASE_URL:', SUPABASE_URL ? '‚úÖ' : '‚ùå');
console.log('SUPABASE_KEY:', SUPABASE_KEY ? '‚úÖ' : '‚ùå');

if (!API_ID || !API_HASH || !SESSION_STRING) {
  console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è @spor3z');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

async function checkSupabase() {
  console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase:');
  
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);
      
    if (error) {
      console.log('‚ùå Supabase –æ—à–∏–±–∫–∞:', error.message);
      return false;
    }
    
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    return true;
  } catch (e) {
    console.log('‚ùå Supabase –æ—à–∏–±–∫–∞:', e.message);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –∞–≥–µ–Ω—Ç–∞
async function checkSpor3z() {
  console.log('\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ @spor3z:');
  
  try {
    const { TelegramClient } = require('telegram');
    const { StringSession } = require('telegram/sessions');
    
    const client = new TelegramClient(new StringSession(SESSION_STRING), parseInt(API_ID), API_HASH, {
      connectionRetries: 3,
      deviceModel: 'Spor3z Test',
      systemVersion: '1.0.0',
      appVersion: '1.0.0',
      langCode: 'ru'
    });
    
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ');
    
    const me = await client.getMe();
    console.log('üë§ –ê–∫–∫–∞—É–Ω—Ç:', me.username);
    console.log('üì± ID:', me.id.toString());
    console.log('‚úÖ @spor3z –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    await client.disconnect();
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è @spor3z:', error.message);
    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π SESSION_STRING');
    console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    console.log('‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
async function checkMessages() {
  console.log('\nüì® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:');
  
  try {
    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
      return;
    }
    
    console.log('üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ:', messages.length);
    
    if (messages.length > 0) {
      messages.forEach((msg, index) => {
        console.log(`${index + 1}. ${msg.role}: ${msg.content.substring(0, 50)}...`);
        console.log(`   –í—Ä–µ–º—è: ${msg.created_at}`);
        console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${msg.source || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      });
    } else {
      console.log('üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π —Ç–∏—à–∏–Ω—ã');
    }
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', e.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async function main() {
  const supabaseOk = await checkSupabase();
  const spor3zOk = await checkSpor3z();
  await checkMessages();
  
  console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:');
  console.log('Supabase:', supabaseOk ? '‚úÖ' : '‚ùå');
  console.log('@spor3z:', spor3zOk ? '‚úÖ' : '‚ùå');
  
  if (!spor3zOk) {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: @spor3z –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ—ç—Ç–æ–º—É —Ç–∏—à–∏–Ω–∞');
    console.log('üîß –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –∞–≥–µ–Ω—Ç–∞');
  } else {
    console.log('\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–∏—à–∏–Ω—ã:');
    console.log('‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ—Ö–æ–¥—è—Ç –¥–æ AI –∞–≥–µ–Ω—Ç–∞');
    console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('‚Ä¢ –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ AI –∞–≥–µ–Ω—Ç–∞');
  }
}

main().catch(console.error);
