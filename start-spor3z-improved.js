const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const axios = require('axios');
require('dotenv').config({ path: 'env.local' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const apiId = 123456; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
const apiHash = 'your_api_hash'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash
const session = new StringSession(''); // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
const client = new TelegramClient(session, apiId, apiHash, {
  connectionRetries: 5,
});

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è AI API
const baseUrl = 'https://humane-jaguar-annually.ngrok-free.app';

async function callAI(message, userId) {
  try {
    const response = await axios.post(`${baseUrl}/api/ai-simple`, {
      message: message,
      source: 'spor3z',
      telegram_id: userId
    }, {
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true'
      }
    });
    
    return response.data.response;
  } catch (error) {
    console.error('AI API –æ—à–∏–±–∫–∞:', error.message);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

async function handleMessage(event) {
  try {
    const message = event.message;
    const sender = await event.getSender();
    
    if (!message || !sender) return;
    
    const userId = sender.id.toString();
    const text = message.text;
    
    if (!text) return;
    
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${text}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    const aiResponse = await callAI(text, userId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await event.reply(aiResponse);
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${aiResponse.substring(0, 50)}...`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Spor3z –±–æ—Ç–∞...');
    
    await client.start({
      phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
      password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
      phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '),
      onError: (err) => console.log(err),
    });
    
    console.log('‚úÖ Spor3z –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –°–µ—Å—Å–∏—è:', client.session.save());
    
    // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    client.addEventHandler(handleMessage, { newMessage: true });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  }
}

startBot();
